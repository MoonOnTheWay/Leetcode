二分法						
278	First Bad Version	递增二分	Easy	http://mp.weixin.qq.com/s/1F4w93XTrVHGd9n1ekq7FQ		
74	Search a 2D Matrix	把矩阵压缩成递增数组，二分思路	Medium	http://mp.weixin.qq.com/s/EPCZNEabjPK2UIXa03LMcg		
240	Search a 2D Matrix II	复杂度O(N),从右上角	Medium	http://mp.weixin.qq.com/s/vhzI2IzsVw0dl-nMtXA0Rw		
153	Find Minimum in Rotated Sorted Array	把mid和right比，二分思路	Medium	http://mp.weixin.qq.com/s/OHtYWfCm5AD5nGUr5HD5gw		
154	Find Minimum in Rotated Sorted Array II	有重复元素，mid和right相等时，right--	Hard	http://mp.weixin.qq.com/s/OHtYWfCm5AD5nGUr5HD5gw
300	Longest Increasing Subsequence	方法一：动态规划。方法二：创建一个tails数组，在tails中二分查找；注意：可能有重复数字！！！	Medium	https://leetcode.com/problems/longest-increasing-subsequence/#/description		
368	Largest Divisible Subset	和最长公共子序列类似	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483862&idx=1&sn=39101dd4352e731294eac670cee02018&chksm=9ae0545ead97dd48149a1bcaa344290064d4782ee9afeba7496f1be551b56a0cd015cbacf7d5&scene=21#wechat_redirect		

动态规划						
174	Dungeon Game	动态规划。从右下角到左上角	Hard	http://mp.weixin.qq.com/s/Zkir5lVALEaINd8YKBKqpw		
401	Binary Watch	第一次回溯法！！做了挺久，记住这题，典型案例；位操作	Easy			
131	Palindrome Partitioning	回溯法，要记得Backtrack之后的恢复步骤！！尤其是对ArrayList； resultList.add(new ArrayList<>(currentList)); //这步不能错写成 resultList.add(currentList); 递归；动规	Medium	http://mp.weixin.qq.com/s/-Z1ngUN_WzorieouPPGWoQ		
78	Subsets	回溯法：不需要等到最后一个结点再add，每个枝都需要返回add； 二进制法	Medium	http://mp.weixin.qq.com/s/1XlzdPoZVhE0kUVT6rODPA		
90	Subsets II	if(i > start && nums[i] == nums[i - 1]) continue; //i>start是为了保留每个根节点的第一根树枝，之后的其他重复树枝就直接剪掉	Medium			
46	Permutations	全排列。方法一：回溯法 复杂度O(n!)。方法二：复杂度O(n^3)		https://leetcode.com/problems/permutations/#/solutions		
47	Permutations II	增加一个isUsed数组，判断结点是否被用过。//对于和前一个结点一样的结点，判断前一个结点是否被used：如果是，说明当前结点和前一个结点在同一个树枝上；否则，说明它们是同一个根的两个分叉，需要剪去当前枝。if(i > 0 && nums[i] == nums[i - 1] && !isUsed[i - 1]) continue;  				
39	Combination Sum	要记录start的位置，每次从start开始，避免重复	Medium			
40	Combination Sum II	和Subsets II类似	Medium			
89	Gray Code	位操作。^ | >> <<	Medium			
79	Word Search	DFS,BFS。做了好久！isVisited = true的位置，以及要恢复为false	Medium	http://mp.weixin.qq.com/s/c53OEvJjHDh4gEr6IYOFGA    	http://www.java2blog.com/2015/12/depth-first-search-in-java.html	
343	Integer Break	多种方法，值得研究。自顶向下和自底向上，数学解法	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483903&idx=1&sn=7547ab490ba22d4a119eeb30e767b65f&chksm=9ae05477ad97dd6130b3d4b3f543545b4d2d7d5336e738fd6556c5fa3342fd5fc1e2ceea5772&scene=21#wechat_redirect		
139	Word Break	自己仿照140改的做法，也用HashMap缓存。本来用ArrayList缓存，和它的contains方法，但超时了。然后改成HashMap通过，Beat 80%	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483885&idx=1&sn=779980700a570e59cfd79fc2a16f92c1&chksm=9ae05465ad97dd732bbc2bc3b48f6a82f0fa8a337fe0020db99e1ebb98ba8d70479183674928&scene=21#wechat_redirect		
140	Word Break II	DFS,用HashMap缓存已经查找过的路径。 注意：不需要把result作为参数传进来，直接设置一个Old_result,一个New_result	Hard	http://mp.weixin.qq.com/s/EEICpFV0icweBDC8vJTqlA		

贪心算法						
122	Best Time to Buy and Sell Stock II	贪心。题目有点绕，其实很简单。读懂题很重要	Easy			
357	Count Numbers with Unique Digits	排列组合找规律，可以递归	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483872&idx=1&sn=b649521a9a6c1e49a56974474c77b75b&chksm=9ae05468ad97dd7e8a00b5b15ba902fae4e565d413cb914d66fd8ccf3a4703af87b653032e82&scene=21#wechat_redirect		
452	Minimum Number of Arrows to Burst Balloons	知识点：贪心算法；lamda表达式；Comparator接口。两种排序方法：按照左端点或右端点	Medium	http://mp.weixin.qq.com/s/iQcmIiD614-qWG7xSoDhlg    	http://m.jb51.net/article/48304.htm	
455	Assign Cookies	复习贪心算法课件：贪心选择性质和最优子结构性质	Medium			
406	Queue Reconstruction by Height	按身高从大到小排列，若身高一样，按人数从小到大排列。先放大的再放小的，可以确保人数就是应该插入的位置，因为每次插入的都是剩下的身高最高的，后面不会有人要插在它前面	Medium			
134	Gas Station	想了好久。。。如何一遍遍历就找出start的位置。设置need参数表示到start之前所需要的gas，left表示从start走到某一站所剩余的gas	Medium
435	Non-overlapping Intervals	和452类似。对end进行排序	Medium			
503	Next Greater Element II	方法一：暴力；方法二：Stack。很巧妙！	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484355&idx=1&sn=863e6f2ebafef26a89cd0d3e89b453dd&chksm=9ae0564bad97df5dba9ebbae7b018df81873b0ae83d8b30b7206002c081ef8f9c91824aadb1d&scene=21#wechat_redirect		
451	Sort Characters By Frequency	多种解法，不同数据结构的运用：1.HashMap(map.keySet()用来遍历哈希表) 2.ArrayList对象的数组 3.StringBuilder(sb.append(), sb.toString()) 4.PriorityQueue(pq.offer(), pq.poll()) 5.字符串转成字符数组：str.toCharArray()，反之String.valueOf(char_array)，或者String str = new(chararray);	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484373&idx=1&sn=c298e0c02fca13016188212b71efde79&chksm=9ae0565dad97df4ba4daffaa438e8ee2939aac8515f6516548dd19ee65e0f80b0ffc26aadf7b&scene=21#wechat_redirect	https://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html	

Binary Tree						
102	Binary Tree Level Order Traversal	两种解法：1. BFS，用queue实现。2. DFS，用递归实现。队列的语法： Queue<Integer> queue = new LinkedList<Integer>(); queue.offer(value); queue.poll()	Medium			
105	Construct Binary Tree from Preorder and Inorder Traversal	想了挺久！递归。记住思路！还可以用一个HashMap代替循环查找的过程，使查找的复杂度降低	Medium			
106	Construct Binary Tree from Inorder and Postorder Traversal	同上	Medium			
107	Binary Tree Level Order Traversal II	对105的两种解法进行调整。DFS想了挺久！自己改写了递归的一个步骤，更便于自己理解。对于每层的第一个节点，添加到第0个list；对于每层的后几个节点，添加到第result.size() - depth - 1个list（找规律得出：含义是，该节点所在的层被右移的位数 = 该层下面的子节点的层数	Easy			
110	Balanced Binary Tree	自底向上：如果root的任一子节点不平衡，那么整棵树都不平衡，直接返回。复杂度O(n)。自顶向下：对每个结点求高度的复杂度为n, 共n个结点，复杂度为O(n^2)	Easy			
104	Maximum Depth of Binary Tree	递归	Easy			
111	Minimum Depth of Binary Tree	两种方法：第一种，O(n)，递归。第二种：按层进行查找，当找到一个左右结点皆为null的结点时，不再向下遍历，直接返回当前深度	Easy			
94	Binary Tree Inorder Traversal	两种方法：第一种：递归解法，比较简单。第二种：循环解法，用stack来实现	Medium	一个套路，反复复习。只能用DFS不能用BFS？？因为不是一个按层遍历的过程，需要每次直接到叶子		
144	Binary Tree Preorder Traversal	按照套路：inorder是 Add after all left children。preorder是 Add before going to children。Push root to the stack first. While stack is not empty, pop a node, visit it, and put its right child then left child to stack. 	Medium			
145	Binary Tree Postorder Traversal	方法一：Modify pre order. Post order is left, right and root. Pre order is root, left, right. Change it to root, right, left. Then reverse the result. 方法二：双指针，一个指向上一个访问的结点，一个指向当前正在访问的结点	Hard			
226	Invert Binary Tree	"方法一：DFS，递归实现，或stack实现。方法二：BFS，queue实现。虽然是easy,还是想了挺久的。。自己想的第一种递归方法效率很低，参考了答案。比较巧妙"	Easy			
103	Binary Tree Zigzag Level Order Traversal	仿照102，两种方法	Medium	
236	Lowest Common Ancestor of a Binary Tree	若左子树返回null，则说明p,q均在右子树中。若右子树返回null，则说明p,q均在左子树中。若左右均不为null，则说明p,q分别在左和右子树中	Medium			
235	Lowest Common Ancestor of a Binary Search Tree	可能先左转再右转再左转	Easy			
													
排序						
349	Intersection of Two Arrays	HashSet的用法。遍历用for循环,复杂度为O(n)。还可以用sort、二分查找，复杂度为O(nlogn)	Easy			
350	Intersection of Two Arrays II	自己想出来的，跟答案思路一样。关键在于，map.get(x) + 1和- 1的操作。另外用ArrayList存储result，再输出到数组中	Easy	Solution to 3rd follow-up question		
56	Merge Intervals	和452类似，对start排序，设置head和tail两个参数，注意一些边界情况的处理。循环结束要把最后一个interval加入进来。Collections.sort() operates on a List, and Arrays.sort() operates on an array	Medium			
321	Create Maximum Number	太难了！要反复复习！细节不写了，太多了，见代码注释。。。。	Hard			
179	Larest Number	跟321的merge()有点类似，但不同！比如对于6,60，如果按照merge()和larger()，60 > 6，这样merge的结果是660.但是在本题中，结果变成606，所以不能简单地比较两字符串大小，而应比较两字符串两种拼接结果的大小！return (str2 + str1).compareTo(str1 + str2); 比较字符串是否相等，不能用==，而是a.equals(b)	Medium			
324	Wiggle Sort II	"方法一：Time: O(nlogn) Space: O(n)，把大于中位数的插在奇数位上，把小于中位数的插在偶数位上。 方法二：太难了。。。Time: O(n) Space: O(1)，一样的原理，设置virtual index，不需要开辟新空间。      (1) elements smaller than the 'median' are put into the last even slots (2) elements larger than the 'median' are put into the first odd slots (3) the medians are put into the remaining slots."	Medium	java数组复制，浅拷贝，深拷贝！System.arraycopy(nums, 0, temp, 0, nums.length); https://jingyan.baidu.com/article/e4d08ffddbb7610fd2f60d90.html	java对简单数据类型传值，对复杂数据类型传引用。http://old.bccn.net/Article/kfyy/java/jszl/200601/3069.html	java简单数据类型和复杂数据类型： http://www.cnblogs.com/simplefrog/archive/2012/07/15/2592011.html
215	Kth Largest Element in an Array	复习快速排序，partition，复杂度为O(n)，快排复杂度为O(nlogn)。也可以用priorityqueue，复杂度O(nlogk)	Medium	听下Binary Heap的网课		
524	Longest Word in Dictionary through Deleting	"方法一：对字典排序，O(k * logk + n * k1 * l). k: size of d, k1 <= k, l: average length of strings in d。方法二：不排序，直接一一比较，记录最长的string, O(n * k * l). k: size of d, l: average length of strings in d"	Medium http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484776&idx=1&sn=167c170cb4bfcca4237c7e12f8511740&chksm=9ae050e0ad97d9f6d319ad7d3792783313f82b816eb78aa7b7eaa1841ff160289454e770800b&mpshare=1&scene=1&srcid=0407jz2RkE3eU9Wo3KDmGr10#rd		
164	Maximum Gap	"Bucket Sort 看懂解法并写出来不难，边界问题调bug调到死！不能把max加进来，因为：if(x == max) continue; //这步不加会导致数组越界：因为[min + k * gap, min + (k + 1) * gap)中k <= n-2, 而(max - min)/gap == n-1 maxGap不能是bucketMin[i] - bucketMax[i - 1], 因为bucketMax[i - 1]可能是空！所以要设一个previous记录上一个不为空的bucket的max值 Arrays.fill()"	Hard	"http://bookshadow.com/weblog/2014/12/14/what-is-the-difference-between-radix-sort-bucket-sort-and-counting-sort/ https://www.byvoid.com/zhs/blog/sort-radix"	"对于N个待排数据，M个桶，平均每个桶[N/M]个数据的桶排序平均时间复杂度为：O(N)+O(M*(N/M)*log(N/M))=O(N+N*(logN-logM))=O(N+N*logN-N*logM) = O(N + c), c = N*(logN - logM) 当N=M时，即极限情况下每个桶只有一个数据时。桶排序的最好效率能够达到O(N)。"	"Math.ceil() floor 向下取整 ceil  向上取整 round 则是4舍5入的计算"
75	Sort Colors	原来right上的值可能为0或1，交换完之后i上的值变成0或1，需要再次检查！而原来left上的值只能为1，不需要检查	Medium			
242	Valid Anagram	答案的方法很巧妙，mark	Easy			
						
BFS						
542	01 Matrix	"DFS,没做出来……不剪枝的话会超时。剪枝效果也不会比BFS好，因为不能预先确定0的位置，可能会导致深度太深，以及重复计算。 答案思路：先确定0的位置，然后先把每个0周围四个位置的距离算好（1），再把每个1周围四个位置算好（2）……层层计算下去。BFS思想，用queue实现，先进先出"	Medium			
101	Symmetric Tree	三种方法，思路相似	Easy			
513	Find Bottom Left Tree Value	BFS很简单，DFS涉及到全局变量，或者wrapper class的问题，目的是使它们的值全局共享，在递归的每一层都能被看到	Medium			
130	Surrounded Regions	从四个边界开始，如果有O，那么和O相连的所有O都不符合，直到找出所有和边界的O相连的O	Medium			
515	Find Largest Value in Each Tree Row	BFS,DFS，简单	Medium			
301	Remove Invalid Parentheses	要遍历两遍：从左到右和从右到左。从左到右移除多余的(, 从右到左移除多余的)。共用一个函数，从右到左时把string颠倒过来，()的顺序也颠倒，然后结束时把string复原输入到结果中	Hard			

DFS						
98	Validate Binary Search Tree	书上也有这题。三种解法！其中一种Iterative的方法是由In-order的iterative solution推广而来的。解法一涉及到java对象传递，min = root相当于min = new TreeNode(root)，改变了原来的地址引用，所以原来的引用对应的值不变，结果不对	Medium	http://mp.weixin.qq.com/s/LiQpm6LdLgdKi_qm8zB_zw	 java对象值传递和对象传递的总结 http://blog.csdn.net/beyond667/article/details/7849337	http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value

						
				
