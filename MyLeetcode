二分法						
278	First Bad Version	递增二分	Easy	http://mp.weixin.qq.com/s/1F4w93XTrVHGd9n1ekq7FQ		
74	Search a 2D Matrix	把矩阵压缩成递增数组，二分思路	Medium	http://mp.weixin.qq.com/s/EPCZNEabjPK2UIXa03LMcg		
240	Search a 2D Matrix II	复杂度O(N),从右上角	Medium	http://mp.weixin.qq.com/s/vhzI2IzsVw0dl-nMtXA0Rw		
153	Find Minimum in Rotated Sorted Array	把mid和right比，二分思路	Medium	http://mp.weixin.qq.com/s/OHtYWfCm5AD5nGUr5HD5gw		
154	Find Minimum in Rotated Sorted Array II	有重复元素，mid和right相等时，right--	Hard	http://mp.weixin.qq.com/s/OHtYWfCm5AD5nGUr5HD5gw
300	Longest Increasing Subsequence	方法一：动态规划。方法二：创建一个tails数组，在tails中二分查找；注意：可能有重复数字！！！	Medium	https://leetcode.com/problems/longest-increasing-subsequence/#/description		
368	Largest Divisible Subset	和最长公共子序列类似	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483862&idx=1&sn=39101dd4352e731294eac670cee02018&chksm=9ae0545ead97dd48149a1bcaa344290064d4782ee9afeba7496f1be551b56a0cd015cbacf7d5&scene=21#wechat_redirect		
35	Search Insert Position	二分查找的套路1	Easy			
410	Split Array Largest Sum	    //这题非常巧妙，运用二分查找    //答案一定在[max, sum]中取得，所以检验mid是否符合要求：    //从左往右累加nums，如果和大于mid，则“切断”，从当前开始从零累加。这样每个切下的断的和都是小于mid的最大值。    //若count比m大，说明mid选小了，因为已经尽可能大地去切断，却仍然多出了，所以left = mid + 1    //若count比m小，说明mid选大了，不够切m段，所以right = mid - 1;   //若count等于m，说明mid可能选大了，因为我们要求最小的mid，所以right = mid - 1    //最终答案是left	Hard			

动态规划						
174	Dungeon Game	动态规划。从右下角到左上角	Hard	http://mp.weixin.qq.com/s/Zkir5lVALEaINd8YKBKqpw		
70	Climbing Stairs	斐波拉契数列，自顶向下和自底向上	Easy	http://mp.weixin.qq.com/s/C22y-pCAS4Zahkds6T8f3g
523	Continuous Subarray Sum	自己用了HashSet而不是HashMap，效率更高。边界条件太多，要自己想case！很多次才通过。把k=0和k=1分开处理，防止出错	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484808&idx=1&sn=7720cc96361903921659f75113d084f7&chksm=9ae05000ad97d916094b26749fe273453314663070192c88f9c72307c769624107820fd6b6fc&mpshare=1&scene=1&srcid=0426tM9zglNiIHcpNClS46vX#rd
560	Subarray Sum Equals K	要用hashmap，不仅记录sum，还要记录每个sum出现的次数，因为可能有重复元素！	Medium			
338	Counting Bits	找规律，f(n) = f(n/2) + n % 2	Medium	http://mp.weixin.qq.com/s/c_yLkUSbkR4O3DsrKGwNgw	
516	Longest Palindromic Subsequence	找规律，if s.charAt(i) == s.charAt(j),dp[i][j] = dp[i+1][j-1] + 2; else dp[i][j] = max{dp[i+1][j], dp[i][j-1]}	Medium			
5	Longest Palindromic Substring	Solution 1: 仿照516，自底向上。效率较低。 Solution 2: 从左到右以每个字符为最长回文字符串的结尾，检查Length+2和Length+1的字符串是否是回文。 Solution 3: 从左到右以每个字符为回文字符串的中心，向两边扩展	Medium			
96	Unique Binary Search Trees	"G(n) = G(0) * G(n - 1) + G(1) * G(n - 2) *...* G(n - 1) * G(0) ;The number of BST n should be the number of BSTS rooted at 0 + rooted at 1 +... ;The number of BSTs rooted at i should be the Cartesian Product(笛卡尔乘积) of BST i-1 and BST n-i"	Medium			
95	Unique Binary Search Trees II	自己仿照上一题的思路改写的答案，Beat 87%，相当于加上了缓存，但要对缓存的结果进行修改；而答案一的解法就是普通的递归解法，没有加缓存	Medium			
416	Partition Equal Subset Sum	这题DFS那章做过。dp[i] = dp[i] || dp[i-num];	Medium			
53	Maximum Subarray	自己做出来的，in-place solution,O(n)	Easy			
472	Concatenated Words	方法一：139. Word Break的延伸。自己的解法报错；方法二：Trie树。使用hash：建立hash的复杂度为O(n * len), 查询的复杂度为O(n * len^2)；使用Trie：建立Trie的复杂度为O(n * len), 查询的复杂度为O(n * len)	Hard	http://blog.csdn.net/hackbuteer1/article/details/7964147	使用Trie：因为当查询如字符串abc是否为某个字符串的前缀时，显然以b、c、d....等不是以a开头的字符串就不用查找了，这样迅速缩小查找的范围和提高查找的针对性	
198	House Robber	max(i) = Max{max(i - 1), nums[i] + max(i - 2)}从左往右，最右边即为我们需要的	Easy			
213	House Robber II	利用上题的函数，Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1))。分为两种情况，选第一个和不选第一个	Medium			
337	House Robber III	非常巧妙！Solution 1: helper(root) returns the max value from root.存在重复子问题，需要hashmap缓存遍历过的结果。Solution 2: helper(root)返回两个值，一个是选择root的max value，一个是不选root时的max value。这样完全避免了重复子问题，效率最高	Medium			
279	Perfect Squares	dp[n] = Min{ dp[n - i*i] + 1 },  n - i*i >=0 && i >= 1	Medium			
152	Maximum Product Subarray	//O(n)    //从左往右遍历时，需要记录每个时刻的绝对值最大的两个数（一正一负），这两个数的可能有：从当前位置开始、从当前位置的前面连续到当前    //所以最终的子序列一定是连续的。	Medium			
303	Range Sum Query - Immutable	完成一个类。注意输入可能是空数组	Easy		
304	Range Sum Query 2D - Immutable	自己的解法是受303启发，每行都是一个一维数组，最后把每行加起来即可。答案的方法更巧妙一点，用sum[i][j]表示从(0,0)到(i,j)的矩形中的元素和。另外多加了一行和一列，用来避免边界判断。可以注意一下	Medium			
576	Out of Boundary Paths	解法一：自己想的，DFS加缓存，但hashmap最后没通过，所以换成了三维数组，也可以换成二维数组。解法二：动规解法，从起点出发，一层一层递增。比较难想	Hard			
100	Same Tree	dfs	Easy			

贪心算法		
121	Best Time to Buy and Sell Stock 	如果延伸一下，给出的是当前价格和前一天价格的差价：{1, 7, 4, 11}, if he gives {0, 6, -3, 7}。用Kadane's Algorithm来解决	Easy			
122	Best Time to Buy and Sell Stock II	贪心。题目有点绕，其实很简单。读懂题很重要	Easy			
124	Best Time to Buy and Sell Stock III	很巧妙。设置四个参数，分别表示：买第一个后剩的钱，卖第一个后剩的钱，买第二个后剩的钱，卖第二个后剩的钱	Hard			
357	Count Numbers with Unique Digits	排列组合找规律，可以递归	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483872&idx=1&sn=b649521a9a6c1e49a56974474c77b75b&chksm=9ae05468ad97dd7e8a00b5b15ba902fae4e565d413cb914d66fd8ccf3a4703af87b653032e82&scene=21#wechat_redirect		
452	Minimum Number of Arrows to Burst Balloons	知识点：贪心算法；lamda表达式；Comparator接口。两种排序方法：按照左端点或右端点	Medium	http://mp.weixin.qq.com/s/iQcmIiD614-qWG7xSoDhlg    	http://m.jb51.net/article/48304.htm	
455	Assign Cookies	复习贪心算法课件：贪心选择性质和最优子结构性质	Medium			
406	Queue Reconstruction by Height	按身高从大到小排列，若身高一样，按人数从小到大排列。先放大的再放小的，可以确保人数就是应该插入的位置，因为每次插入的都是剩下的身高最高的，后面不会有人要插在它前面	Medium			
134	Gas Station	想了好久。。。如何一遍遍历就找出start的位置。设置need参数表示到start之前所需要的gas，left表示从start走到某一站所剩余的gas	Medium
435	Non-overlapping Intervals	和452类似。对end进行排序	Medium			
503	Next Greater Element II	方法一：暴力；方法二：Stack。很巧妙！	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484355&idx=1&sn=863e6f2ebafef26a89cd0d3e89b453dd&chksm=9ae0564bad97df5dba9ebbae7b018df81873b0ae83d8b30b7206002c081ef8f9c91824aadb1d&scene=21#wechat_redirect		
451	Sort Characters By Frequency	多种解法，不同数据结构的运用：1.HashMap(map.keySet()用来遍历哈希表) 2.ArrayList对象的数组 3.StringBuilder(sb.append(), sb.toString()) 4.PriorityQueue(pq.offer(), pq.poll()) 5.字符串转成字符数组：str.toCharArray()，反之String.valueOf(char_array)，或者String str = new(chararray);	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484373&idx=1&sn=c298e0c02fca13016188212b71efde79&chksm=9ae0565dad97df4ba4daffaa438e8ee2939aac8515f6516548dd19ee65e0f80b0ffc26aadf7b&scene=21#wechat_redirect	https://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html	

Binary Tree						
102	Binary Tree Level Order Traversal	两种解法：1. BFS，用queue实现。2. DFS，用递归实现。队列的语法： Queue<Integer> queue = new LinkedList<Integer>(); queue.offer(value); queue.poll()	Medium			
105	Construct Binary Tree from Preorder and Inorder Traversal	想了挺久！递归。记住思路！还可以用一个HashMap代替循环查找的过程，使查找的复杂度降低	Medium			
106	Construct Binary Tree from Inorder and Postorder Traversal	同上	Medium			
107	Binary Tree Level Order Traversal II	对105的两种解法进行调整。DFS想了挺久！自己改写了递归的一个步骤，更便于自己理解。对于每层的第一个节点，添加到第0个list；对于每层的后几个节点，添加到第result.size() - depth - 1个list（找规律得出：含义是，该节点所在的层被右移的位数 = 该层下面的子节点的层数	Easy			
110	Balanced Binary Tree	自底向上：如果root的任一子节点不平衡，那么整棵树都不平衡，直接返回。复杂度O(n)。自顶向下：对每个结点求高度的复杂度为n, 共n个结点，复杂度为O(n^2)	Easy			
104	Maximum Depth of Binary Tree	递归	Easy			
111	Minimum Depth of Binary Tree	两种方法：第一种，O(n)，递归。第二种：按层进行查找，当找到一个左右结点皆为null的结点时，不再向下遍历，直接返回当前深度	Easy			
94	Binary Tree Inorder Traversal	两种方法：第一种：递归解法，比较简单。第二种：循环解法，用stack来实现	Medium	一个套路，反复复习。只能用DFS不能用BFS？？因为不是一个按层遍历的过程，需要每次直接到叶子		
144	Binary Tree Preorder Traversal	按照套路：inorder是 Add after all left children。preorder是 Add before going to children。Push root to the stack first. While stack is not empty, pop a node, visit it, and put its right child then left child to stack. 	Medium			
145	Binary Tree Postorder Traversal	方法一：Modify pre order. Post order is left, right and root. Pre order is root, left, right. Change it to root, right, left. Then reverse the result. 方法二：双指针，一个指向上一个访问的结点，一个指向当前正在访问的结点	Hard			
226	Invert Binary Tree	"方法一：DFS，递归实现，或stack实现。方法二：BFS，queue实现。虽然是easy,还是想了挺久的。。自己想的第一种递归方法效率很低，参考了答案。比较巧妙"	Easy			
103	Binary Tree Zigzag Level Order Traversal	仿照102，两种方法	Medium	
236	Lowest Common Ancestor of a Binary Tree	若左子树返回null，则说明p,q均在右子树中。若右子树返回null，则说明p,q均在左子树中。若左右均不为null，则说明p,q分别在左和右子树中	Medium			
235	Lowest Common Ancestor of a Binary Search Tree	可能先左转再右转再左转	Easy
572	Subtree of Another Tree	虽然是简单题，但我的DFS解法犯了一个很典型的错误！改正方法是加一个flag记录当前小树节点是否是根。另一种解法是：第一个函数用来遍历大树的每一个节点作为根，然后输入到第二个函数：第二个函数用来检测以当前大树节点为根的子树是否与小树完全一样	Easy			
100	Same Tree	dfs	Easy			
315	Count of Smaller Numbers After Self	//思路很巧妙。从右到左建立Binary Search Tree    //每个结点除了value外，还要记录sum和dup值：sum表示比该结点小的结点个数，dup表示当前结点重复结点的个数	Hard			
116	Populating Next Right Pointers in Each Node	设两个指针，一个表示每层的最左结点，一个表示每层的遍历结点	Medium			
117	Populating Next Right Pointers in Each Node II	很巧妙，新建一个虚拟头结点，它的next是每层最左结点	Medium			
331	Verify Preorder Serialization of a Binary Tree	用入度，出度来解决，对一个合法的二叉树，总的indegree+outdegree一定等于0	Medium			
449	Serialize and Deserialize BST	自己做的，做了挺久。。我是用BFS，按层从上到下依次来。Solution 2: Pre-Order	Medium	Integer.parseInt(string）把String型数字转成int型。例如："12"转成12		
297	Serialize and Deserialize Binary Tree	和449一样。fb常考题！	Hard			
											
排序						
349	Intersection of Two Arrays	HashSet的用法。遍历用for循环,复杂度为O(n)。还可以用sort、二分查找，复杂度为O(nlogn)	Easy			
350	Intersection of Two Arrays II	自己想出来的，跟答案思路一样。关键在于，map.get(x) + 1和- 1的操作。另外用ArrayList存储result，再输出到数组中	Easy	Solution to 3rd follow-up question		
56	Merge Intervals	和452类似，对start排序，设置head和tail两个参数，注意一些边界情况的处理。循环结束要把最后一个interval加入进来。Collections.sort() operates on a List, and Arrays.sort() operates on an array	Medium			
321	Create Maximum Number	太难了！要反复复习！细节不写了，太多了，见代码注释。。。。	Hard			
179	Larest Number	跟321的merge()有点类似，但不同！比如对于6,60，如果按照merge()和larger()，60 > 6，这样merge的结果是660.但是在本题中，结果变成606，所以不能简单地比较两字符串大小，而应比较两字符串两种拼接结果的大小！return (str2 + str1).compareTo(str1 + str2); 比较字符串是否相等，不能用==，而是a.equals(b)	Medium			
324	Wiggle Sort II	"方法一：Time: O(nlogn) Space: O(n)，把大于中位数的插在奇数位上，把小于中位数的插在偶数位上。 方法二：太难了。。。Time: O(n) Space: O(1)，一样的原理，设置virtual index，不需要开辟新空间。      (1) elements smaller than the 'median' are put into the last even slots (2) elements larger than the 'median' are put into the first odd slots (3) the medians are put into the remaining slots."	Medium	java数组复制，浅拷贝，深拷贝！System.arraycopy(nums, 0, temp, 0, nums.length); https://jingyan.baidu.com/article/e4d08ffddbb7610fd2f60d90.html	java对简单数据类型传值，对复杂数据类型传引用。http://old.bccn.net/Article/kfyy/java/jszl/200601/3069.html	java简单数据类型和复杂数据类型： http://www.cnblogs.com/simplefrog/archive/2012/07/15/2592011.html
215	Kth Largest Element in an Array	复习快速排序，partition，复杂度为O(n)，快排复杂度为O(nlogn)。也可以用priorityqueue，复杂度O(nlogk)	Medium	听下Binary Heap的网课		
524	Longest Word in Dictionary through Deleting	"方法一：对字典排序，O(k * logk + n * k1 * l). k: size of d, k1 <= k, l: average length of strings in d。方法二：不排序，直接一一比较，记录最长的string, O(n * k * l). k: size of d, l: average length of strings in d"	Medium http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484776&idx=1&sn=167c170cb4bfcca4237c7e12f8511740&chksm=9ae050e0ad97d9f6d319ad7d3792783313f82b816eb78aa7b7eaa1841ff160289454e770800b&mpshare=1&scene=1&srcid=0407jz2RkE3eU9Wo3KDmGr10#rd		
164	Maximum Gap	"Bucket Sort 看懂解法并写出来不难，边界问题调bug调到死！不能把max加进来，因为：if(x == max) continue; //这步不加会导致数组越界：因为[min + k * gap, min + (k + 1) * gap)中k <= n-2, 而(max - min)/gap == n-1 maxGap不能是bucketMin[i] - bucketMax[i - 1], 因为bucketMax[i - 1]可能是空！所以要设一个previous记录上一个不为空的bucket的max值 Arrays.fill()"	Hard	"http://bookshadow.com/weblog/2014/12/14/what-is-the-difference-between-radix-sort-bucket-sort-and-counting-sort/ https://www.byvoid.com/zhs/blog/sort-radix"	"对于N个待排数据，M个桶，平均每个桶[N/M]个数据的桶排序平均时间复杂度为：O(N)+O(M*(N/M)*log(N/M))=O(N+N*(logN-logM))=O(N+N*logN-N*logM) = O(N + c), c = N*(logN - logM) 当N=M时，即极限情况下每个桶只有一个数据时。桶排序的最好效率能够达到O(N)。"	"Math.ceil() floor 向下取整 ceil  向上取整 round 则是4舍5入的计算"
75	Sort Colors	参考排名第一的solution,非常简洁。思路是：对于2，和second交换，对于0，和zero交换，对于1，不操作	Medium			
242	Valid Anagram	答案的方法很巧妙，mark	Easy			
329	Longest Increasing Path in a Matrix	自己做出来的，开心。注意，DFS加缓存的时候，不要只考虑用hashmap。先考虑能否用数组，再考虑用hashmap	Hard			
315	Count of Smaller Numbers After Self	Solution 1: MergeSort: count[i] = count of nums[j] - nums[i] < 0 with j > i . Solution 2: 从右到左建立Binary Search Tree    //每个结点除了value外，还要记录sum和dup值：sum表示比该结点小的结点个数，dup表示当前结点重复结点的个数	Hard	MergeSort		
327	Count of Range Sum	count[i] = count of lower <= S[j] - S[i] <= upper with j > i	Hard	MergeSort		
						
BFS						
542	01 Matrix	"DFS,没做出来……不剪枝的话会超时。剪枝效果也不会比BFS好，因为不能预先确定0的位置，可能会导致深度太深，以及重复计算。 答案思路：先确定0的位置，然后先把每个0周围四个位置的距离算好（1），再把每个1周围四个位置算好（2）……层层计算下去。BFS思想，用queue实现，先进先出"	Medium			
101	Symmetric Tree	三种方法，思路相似	Easy			
513	Find Bottom Left Tree Value	BFS很简单，DFS涉及到全局变量，或者wrapper class的问题，目的是使它们的值全局共享，在递归的每一层都能被看到	Medium			
130	Surrounded Regions	从四个边界开始，如果有O，那么和O相连的所有O都不符合，直到找出所有和边界的O相连的O	Medium			
515	Find Largest Value in Each Tree Row	BFS,DFS，简单	Medium			
301	Remove Invalid Parentheses	要遍历两遍：从左到右和从右到左。从左到右移除多余的(, 从右到左移除多余的)。共用一个函数，从右到左时把string颠倒过来，()的顺序也颠倒，然后结束时把string复原输入到结果中	Hard			

DFS						
98	Validate Binary Search Tree	书上也有这题。三种解法！其中一种Iterative的方法是由In-order的iterative solution推广而来的。解法一涉及到java对象传递，min = root相当于min = new TreeNode(root)，改变了原来的地址引用，所以原来的引用对应的值不变，结果不对	Medium	http://mp.weixin.qq.com/s/LiQpm6LdLgdKi_qm8zB_zw	 java对象值传递和对象传递的总结 http://blog.csdn.net/beyond667/article/details/7849337	http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value
230	Kth Smallest Element in a BST	Solution 1: DFS In-Order Iterative。Solution 2: DFS In-Order Recursive。Solution 3: Binary Search，和书上C4_Q11_RandomNode很像。      Follow-up: If we could add a count field in the BST node class, it will take O(n) time when we calculate the count value for the whole tree, but after that, it will take O(logn) time when insert/delete a node or calculate the kth smallest element.	Medium			
114	Flatten Binary Tree to Linked List	Four Solutions！多复习！	Medium		
547	Friend Circles	"方法一.复习Union-Find！ 这个问题还可以换个说法：找出Tree的个数。set the unvisited node as the root, and find the whole tree rooted at it, in the process, set all the nodes in this tree as visited  方法二：BFS 方法三： DFS"	Medium	http://blog.csdn.net/dm_vincent/article/details/7655764		
200	Number of Islands	和547套路一样	Medium			
108	Convert Sorted Array to Binary Search Tree	递归，比较简单，都属于那一类的	Easy			
494	Target Sum	第一个答案的方法！sum(P) = (target + sum(nums)) / 2。然后转化为求和为某个值的subset的个数	Medium			
416	Partition Equal Subset Sum	和494思路一样，求和为某个值的subset是否存在	Medium		
112	Path Sum	自己做的	Easy	
113	Path Sum II	自己做的。有两处需要remove，不要忘记！记住：回溯问题，有add必有remove，必须对称！	Medium			
437	Path Sum III	两种解法，其中优化解法复杂度O(n)，想了很久，解释见注释。书上也有这题。记住 ！	Easy(标错了吧)	
329	Longest Increasing Path in a Matrix	自己做出来的，开心。注意，DFS加缓存的时候，不要只考虑用hashmap。先考虑能否用数组，再考虑用hashmap	Hard			
417	Pacific Atlantic Water Flow	又是四个方向问题。DFS的根是四个边缘，从边缘开始往中心遍历，遍历出能够到达的所有路径    //pacific和atlantic不要同时进行，一个一个来，   //BFS则是从四个边缘同时开始往中心遍历，一层层进行	Medium			
529	Minesweeper	自己做的DFS	Medium			
514	Freedom Trail	每步最优，最终解并不一定是最优！// Solution 1: DFS+cache // Solution2：动规：dp[i][j]表示从ring的第j个位置开始，拼出key的第i个位置以后的所有字母，我们最终要求的是dp[0][0],递推关系是：                   dp[i][j] = Min{dp[i + 1][k] + |j - k|}	Hard			
129	Sum Root to Leaf Numbers	自己做的太麻烦了，先转成arraylist再转成int，很复杂.答案思路，DFS过程中，每往下一层，sum乘10再加上当前val	Medium			

回溯法						
401	Binary Watch	第一次回溯法！！做了挺久，记住这题，典型案例；位操作	Easy			
131	 Palindrome Partitioning	回溯法，要记得Backtrack之后的恢复步骤！！尤其是对ArrayList； resultList.add(new ArrayList<>(currentList)); //这步不能错写成 resultList.add(currentList); 递归；动规	Medium	http://mp.weixin.qq.com/s/-Z1ngUN_WzorieouPPGWoQ		
78	Subsets	回溯法：不需要等到最后一个结点再add，每个枝都需要返回add； 二进制法	Medium	http://mp.weixin.qq.com/s/1XlzdPoZVhE0kUVT6rODPA		
90	Subsets II	if(i > start && nums[i] == nums[i - 1]) continue; //i>start是为了保留每个根节点的第一根树枝，之后的其他重复树枝就直接剪掉	Medium			
46	Permutations	全排列。方法一：回溯法 复杂度O(n!)。方法二：复杂度O(n^3)	Medium	https://leetcode.com/problems/permutations/#/solutions	http://blog.csdn.net/linhuanmars/article/details/21569031	
47	Permutations II	增加一个isUsed数组，判断结点是否被用过。//对于和前一个结点一样的结点，判断前一个结点是否被used：如果是，说明当前结点和前一个结点在同一个树枝上；否则，说明它们是同一个根的两个分叉，需要剪去当前枝。if(i > 0 && nums[i] == nums[i - 1] && !isUsed[i - 1]) continue;  	Medium			
39	Combination Sum	要记录start的位置，每次从start开始，避免重复	Medium			
40	Combination Sum II	和Subsets II类似	Medium			
89	Gray Code	位操作。^ | >> <<	Medium			
79	Word Search	DFS,BFS。做了好久！isVisited = true的位置，以及要恢复为false	Medium	http://mp.weixin.qq.com/s/c53OEvJjHDh4gEr6IYOFGA    	http://www.java2blog.com/2015/12/depth-first-search-in-java.html	
343	Integer Break	多种方法，值得研究。自顶向下和自底向上，数学解法	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483903&idx=1&sn=7547ab490ba22d4a119eeb30e767b65f&chksm=9ae05477ad97dd6130b3d4b3f543545b4d2d7d5336e738fd6556c5fa3342fd5fc1e2ceea5772&scene=21#wechat_redirect		
139	Word Break	自己仿照140改的做法，也用HashMap缓存。本来用ArrayList缓存，和它的contains方法，但超时了。然后改成HashMap通过，Beat 80%	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483885&idx=1&sn=779980700a570e59cfd79fc2a16f92c1&chksm=9ae05465ad97dd732bbc2bc3b48f6a82f0fa8a337fe0020db99e1ebb98ba8d70479183674928&scene=21#wechat_redirect		
140	Word Break II	DFS,用HashMap缓存已经查找过的路径。 注意：不需要把result作为参数传进来，直接设置一个Old_result,一个New_result	Hard	http://mp.weixin.qq.com/s/EEICpFV0icweBDC8vJTqlA		
491	Increasing Subsequences	和前面几题一个套路：有重复元素的排列问题，共同思路是：同一层上，相同元素只能出现一次。同一个树枝上，相同元素可以同时出现。  //输入的数组不是递增的，也不能改变原来的顺序，所以不能sort，这导致重复的元素不能相邻，检查重复比较麻烦//Solution 1    //最简单的做法就是用HashSet存储所有结果，利用HashSet没有重复key的特点    //但这种做法相当于没有剪枝操作，效率不高     //Solution 2    //仿照90 SubSet II的思路    //beat 99.43%	Medium			
526	Beautiful Arrangement	1.自己的解法：用hashset记录访问过的节点。2.解法二：用数组代替hashset。3.对解法二改进：把从前往后改成从后往前。beat 95.48%！因为这样可以避免搜索过深：从前往后的话，前面的索引值比较小，容易被整除，所以会一直向下搜索。从后往前则可以在比较浅的位置中断错误路径。4.解法四：用swap函数代替visited。好处是完全避免了是否重复的判断，效率更高,beat 98%	Medium			

分治算法						
241	Different Ways to Add Parentheses	（记得用hashmap缓存结果！）记录运算符的下标，然后对于每一个运算符，都可以将当前的表达式分成左右两部分：将左右两部分的数字进行组合，就可以得到当前递归的答案集合‘如果当前表达式没有运算符，则返回当前表达式的数字。	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484844&idx=1&sn=2d9d8a78ecf27258d5f7223b7b95d77a&chksm=9ae05024ad97d9324f394474e5bebaa5c13ed4bb77c6255825de62e2f7bf4cd2f1c5e585a7e4&mpshare=1&scene=23&srcid=0502YuXSifSbQf1F7f2VAwwv#rd	分治法 http://blog.jobbole.com/83944/	
4	Median of Two Sorted Arrays	经典难题，Algorithms上面也有。二分法，也是分治法思想。Time: O(log(min(m, n)))	Hard	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484853&idx=1&sn=20c8931836c07bdbdb6556aecbbd0cdf&chksm=9ae0503dad97d92b1062193a0057ca0ba64d4709ffe43791d6e1bfbe8986fd4a60cdb1ed7040&mpshare=1&scene=23&srcid=05069Iquuw2CJ7IMguOJ3gsQ#rd		
312	Burst Balloons	分治法的反向思维！见注释。可以有两种实现方法：自顶向下递归加缓存，和自底向上循环。很经典！其中，cache[left][right]和dp[left][right]都表示以left和right为边界的区间内最大的得分	Hard			

数学						
67	Add Binary	用StringBuilder提高效率	Easy			
541	Reverse String II	//Solution 1: O(n), but we need to copy every element in the string.//Solution 2: O(n), but we only need to swap n/2 elements in the string, while leaving the other elements untouched.	Easy			
125	Valid Palindrome	Character.isLetterOrDigit()和Character.toLowerCase的用法！	Easy			
43	Multiply Strings	大整数乘法，很巧妙 `num1[i] * num2[j]` will be placed at indices `[i + j`, `i + j + 1]` 	Medium				
262	Ugly Number	positive，看清题目要求	Easy			
264	Ugly Number II	很巧妙！ugly[i] = Math.min(Math.min(ugly[num2] * 2, ugly[num3] * 3), ugly[num5] * 5)	Medium			
313	Super Ugly Number	Solution 1: My solution, 仿照264。//Solution 2: 在1的基础上改进，把两个循环合并成一个循环，把每个prime*ugly的value保存下来，避免重复计算，beat 95.27%。//Solution 3: O(n * logk),用priorityqueue，每次取出最小的值  //每个对象保存三个值，对应的素数值，对应的指针位置，对应的value（用来排序）	Medium			
373	Find K Pairs with Smallest Sums	Time: O(k * logk) 只需要进行k次循环 //规律是：pq中只需维持nums2.length的大小，每次弹出一个pair时，新加入一个newpair，这个newpair的终点和pair相同，起点为pair的起点+1	Medium	PriorityQueue		
326	Power of Three	非递归或循环的解法：int能保存的最大power of 3是3^19,看3^19能不能被n整除	Easy			

Array						
88	Merge Sorted Array	双指针问题	Easy			
189	Rotate Array	My Solution: Start from one element and keep rotating until we have rotated n different elements. Solution 2: Reverse the first n - k elements, the last k elements, and then all the n elements.	Easy			
26	Remove Duplicates from Sorted Array		Easy			
80	Remove Duplicates from Sorted Array II	和26一个套路。if(nums[i] != nums[count - 2])  nums[count++] = nums[i];   //注意: 不是和nums[i - 2]，而是和nums[count - 2]相比。因为count是待填入的位置，所以应该和这个位置前面的两个数不同   	Medium			
57	Insert Interval	分成三段：与newInterval完全不重叠的左边区间，与newInterval重叠的中间区间，与newInterval完全不重叠的右边区间	Hard			
581	Shortest Unsorted Continuous Subarray	不太easy。。自己做出了一种解法，然后答案有两种解法。其中一种解法O(n)很巧妙！双指针。min表示从左到右的最大值，max表示从右往左的最小值。	Easy			
169	Majority Element	Since the majority element appears more than n/2 times, if we remove two different elements from the array, the majority element will still appears more than n/2 times	Easy			
229	Majority Element II	"如果是> 1/k，那么最多只有k - 1个答案，那就设置k - 1个majority。    //最后一定要再遍历一遍统计每个majority真实出现的次数，验证"	Medium			
		
链表Linked List						
234	Palindrome Linked List	//Solution 1: 先通过fast和slow遍历一遍数组，再把右半部分反转   //Solution 2: beat 94.52%。reverse左半边，这样一次遍历就可以同时完成slow,fast的定位和左半边反转	Easy	链表反转，避免空指针操作！		
61	Rotate List	Solution 1: My solution, 仿照189。Start from one element and keep rotating until we have rotated n different elements. Solution 2: 把链表首尾串联	Medium			
21	Merge Two Sorted Lists	递归解法	Easy			
206	Reverse Linked List	自己写出来iterative解法，递归解法就是对iterative稍作改动	Easy			
92	Reverse Linked List II	两种解法，重点在于virtual head，比较巧妙。我的解法是基于206，答案解法比较新	Medium			
148	Sort List	Solution 1: MergeSort：比较好想，虚拟头结点的使用。Solution 2: QuickSort：答案的quicksort，交换的是节点的值，不是节点本身，不同于一般QuickSort从两边往中间，这种解法都是从左到右交换的	Medium			

Graph						
332	Reconstruct Itinerary	hierholzers算法，欧拉路径：a trail which visits every edge exactly once	Medium	http://www.geeksforgeeks.org/hierholzers-algorithm-directed-graph/	1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。  2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。 3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。	
399	Evaluate Division	//这题其实是一个在双向图中搜索边的问题    //graph的题都需要先构建图，用hashmap，本题还涉及每条边的权重，所以要额外增加一个hashmap存储权重，这点看了答案才想到    //然后对于要搜索的每条边，都进行深度优先搜索dfs    //对于图来说，dfs需要设置visited，防止重复搜索某条边，比如a-b-a-    //dfs函数自己写的，比答案简单，不需要传递value值	Medium			
310	Minimum Height Trees	//BFS，我用了queue来实现，答案是用两个arraylist    //受path graph的启发，我们从所有叶子开始，同时向前移动，直到所有叶子汇聚在一点或者两点    //当把每一个叶子移到它的parent位置时，需要把parent的该叶子删除，如果此时parent只剩一个叶子，那么把parent加入叶子中    //用HashSet存储和每个索引相连的路径，因为需要频繁地查找和删除操作。    //返回hashset的值用iterator，随机返回一个。但对于叶子结点，只能返回一个值    	Medium	HashSet是泛型类，不能直接建array。只能用ArrayList。HashSet<Integer>[] paths = new HashSet<Integer>[n]; error: generic array creation，	Collections.singletonList(0)	
133	Clone Graph	做了好久。。 DFS自己做出来了，但也经过几个弯路。BFS好难想。。。注意引用地址。详细见注释	Medium			
207	Course Schedule	寻找图中有没有环。1、BFS解法。拓扑排序，环无法被去掉，所以count会小于结点数。2、DFS解法。对每一个结点依次进行深度搜索，如果回到出发点，则证明有环。改进的DFS解法！效率最高！beat 99.89%：visited不再是简单的true or false，而有0,1,2三个值：0表示未被访问，1表示正在被访问的当前路径上，2表示已经被访问并且被证明不在环上。	Medium	拓扑排序：http://blog.csdn.net/changyuanchn/article/details/17067349	ArrayList[] paths = new ArrayList[numCourses];  //error: cannot create array with '<>'，这里不能加<>。遍历的时候，(int)paths[root].get(i)强制类型转换！或者：ArrayList<Integer>[] paths = new ArrayList[numCourses]，不需要强制类型转换	
210	Course Schedule II	仿照207，改进的DFS解法效率最高。但要注意：207中paths[pre[0]].add(pre[1])和paths[pre[1]].add(pre[0])都对，但本题只能是paths[pre[0]].add(pre[1])。因为本题要求的路径其实就是拓扑排序的定义，要把优先级最高的结点放在前面，所以从后置课向前置课进行遍历，遍历到尽头（或尽头的结点都已经被加入路径）时，即是当前优先级最高的前置课	Medium								

Bit Manipulation						
136	Single Number	Bit Manipulation. 两次^，得到0	Easy			
137	Single Number II		Medium			
191	Number of 1 Bits	不是>>，应该是无符号移位	Easy			
371	Sum of Two Integers		Easy	位操作套路总结：https://leetcode.com/problems/sum-of-two-integers/#/solutions		
342	Power of Four	 //4^k = 2^(2k)   //只有一个1位，且1在偶数位置上    //num & (num - 1)用来remove the last 1 bit	Easy			
231	Power of Two	只有一个1位	Easy			
268	Missing Number	a^b^b =a. 异或操作的特点：对相同的数异或两次，变回原来	Easy			
190	Reverse Bits	Solution 1: 设一个mask = 1<<31，每次mask和n同时右移一位，这样mask可以使对称位置变成1	Easy			
201	Bitwise AND of Numbers Range	1<<count表示从右往左count个位之后，m和n完全相同，即count左边的所有位都相同。然后乘m把count左边的位拼接上去 	Medium			
187	Repeated DNA Sequences	Solution 1: 把字符串存到hashset中。Solution 2: 用int型变量代替字符串，用bit manipulation	Medium			

Design						
155	Min Stack	自己做的，只用一个stack的解法，beat 87.87%	Easy			


				
