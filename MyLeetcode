二分法						
278	First Bad Version	递增二分	Easy	http://mp.weixin.qq.com/s/1F4w93XTrVHGd9n1ekq7FQ		
74	Search a 2D Matrix	把矩阵压缩成递增数组，二分思路	Medium	http://mp.weixin.qq.com/s/EPCZNEabjPK2UIXa03LMcg		
240	Search a 2D Matrix II	复杂度O(N),从右上角	Medium	http://mp.weixin.qq.com/s/vhzI2IzsVw0dl-nMtXA0Rw		
153	Find Minimum in Rotated Sorted Array	把mid和right比，二分思路	Medium	http://mp.weixin.qq.com/s/OHtYWfCm5AD5nGUr5HD5gw		
154	Find Minimum in Rotated Sorted Array II	有重复元素，mid和right相等时，right--	Hard	http://mp.weixin.qq.com/s/OHtYWfCm5AD5nGUr5HD5gw
300	Longest Increasing Subsequence	方法一：动态规划。方法二：创建一个tails数组，在tails中二分查找；注意：可能有重复数字！！！	Medium	https://leetcode.com/problems/longest-increasing-subsequence/#/description		
368	Largest Divisible Subset	和最长公共子序列类似	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483862&idx=1&sn=39101dd4352e731294eac670cee02018&chksm=9ae0545ead97dd48149a1bcaa344290064d4782ee9afeba7496f1be551b56a0cd015cbacf7d5&scene=21#wechat_redirect		
35	Search Insert Position	二分查找的套路1	Easy			
410	Split Array Largest Sum	    //这题非常巧妙，运用二分查找    //答案一定在[max, sum]中取得，所以检验mid是否符合要求：    //从左往右累加nums，如果和大于mid，则“切断”，从当前开始从零累加。这样每个切下的断的和都是小于mid的最大值。    //若count比m大，说明mid选小了，因为已经尽可能大地去切断，却仍然多出了，所以left = mid + 1    //若count比m小，说明mid选大了，不够切m段，所以right = mid - 1;   //若count等于m，说明mid可能选大了，因为我们要求最小的mid，所以right = mid - 1    //最终答案是left	Hard			
29	Divide Two Integers	    //  二分法思想    //  Find the largest multiple so that (divisor * multiple <= dividend),  //  whereas we are moving with stride 1, 2, 4, 8, 16...2^n for performance reason. //  Think this as a binary search.	Medium			
33	Search in Rotated Sorted Array	Solution 1: 先按照153的方法找到最小值的index，然后在index左边或右边再进行二分查找  //Solution 2: 只用一个binary search.依据：when rotating the array, there must be one half of the array that is still in sorted order.分为两种情况：1、左边是排序的或者右边是非排序的 2、右边是排序的或者左边是非排序的	Medium			
81	Search in Rotated Sorted Array II	分为三种情况（比33多了第三种情况）：1、左边是排序的或右边是未排序的；2、右边是排序的或左边是未排序的；3、left=right=mid，说明有重复元素，右边界左移，跳过重复元素	Medium			
34	Search for a Range	设置一个函数用来找到target的左边界，然后再在左边界右边找到target + 1的左边界，也即找到了target的右边界。注意要检查边界的正确性	Medium	二分法套路一和套路二的区别：如果while循环内对mid进行return操作，那么用套路一，否则用套路二		
50	Pow(x, n)	对指数n进行二分，分为奇数和偶数两种情况。注意n = MIN_VALUE时的各种临界情况	Medium			
287	Find the Duplicate Number	O(n).思路和142. Linked List Cycle II 一样，但这里的一步，两步不再只是简单的右移，而是根据index进行移动	Medium			
167	Two Sum II - Input array is sorted	双指针	Easy			
275	H-Index II	//最终求的是最大的次数，使得对应的引用数 >= 次数。思路很简单，但一些边界条件，包括=时的处理，容易出错。有三种处理方法。	Medium			
162	Find Peak Element	画出曲线图，上坡时，left右移，下坡时，right左移	Medium			
69	Sqrt(x)	要用mid > x / mid，而不是mid * mid > x，因为mid * mid可能超过Integer.MAX_VALUE。Solution 2: Newton公式，维基百科https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division	Easy			
222	Count Complete Tree Nodes	二分法的思路：每次砍掉一般的树枝，直到最后只剩一个叶子。Solution 1: 二分法的递归解法，每次需要重复计算root的高度和root.right的height; Solution 2: 二分法的循环解法，效率更高，只需要计算一次总高度h. Time: O((log n)^2).Solution 3: 二叉树的一般解法格式	Medium			
209	Minimum Size Subarray Sum	Solution 1: binary search, Time: O(n * log n)，转化成从不同起始点开始，在递增序列中找到target；Solution 2: Two pointers, Time: O(n)	Medium			
378	Kth Smallest Element in a Sorted Matrix	Solution 1: Binary Search。效率更高，非常巧妙：转化为找<= target的count数。Solution 2: PriorityQueue, 和 373. Find K Pairs with Smallest Sums一样：pq每次弹出一个值，把该值所在列的下一行的值加入pq中	Medium			
441	Arranging Coins	注意long型,double型的数值最大值，防止越界	Easy			
475	Heaters	Solution 1: for each house, we find the nearest heater by binary search in heaters;//the result is the maximum of all the nearest distances 。Solution 2: 把二分法替换为：直接先把houses排序，这样直接从左到右遍历，不需要进行查找。效率更高，双指针	Easy（应该是Medium）			
454	4Sum II	两个Hashmap,O(n ^ 2)	Medium			
436	Find Right Interval	对每个end，找到大于等于它的最小start对应的index。Solution 1: 首次使用TreeMap，红黑树，对map中的key进行排序. Solution 2: binary search，不使用TreeMap数据结构	Medium	首次使用TreeMap。HashMap:底层是哈希表数据结构。线程不同步。TreeMap:底层是二叉树数据结构，线程不同步，可用于给Map集合中的键进行排序。	http://docs.oracle.com/javase/7/docs/api/java/util/NavigableMap.html	
367	Valid Perfect Square	和67两个套路一样。注意乘法操作时用long型防止越界	Easy			
392	Is Subsequence	对于follow-up，参考答案的解法，用binary search，O(N) time for pre-processing, O(Mlog?) for each S.	Medium	String.indexOf(target, i)：从i开始查找target		
363	Max Sum of Rectangle No Larger Than K	//Time: O(Min{m, n} ^ 2 * Max{m, n} * log(Max{m, n}))    //可以设置sum[][]表示从(0, 0)到(i, j)的总和。为了简化空间复杂度，用一维数组代替。    //本题的简化版本是：max subarray sum no more than k. 即在数组中找小于等于k的最大sum	Hard	https://www.quora.com/Given-an-array-of-integers-A-and-an-integer-k-find-a-subarray-that-contains-the-largest-sum-subject-to-a-constraint-that-the-sum-is-less-than-k	TreeSet的运用。treeset.ceiling()	

动态规划						
174	Dungeon Game	动态规划。从右下角到左上角。dp[i][j]表示从(i, j)到右下角终点的最少血量。还可以优化空间复杂度。因为只用到i+1时刻的值，所以可以降维。(dp[j], dp[j + 1])相当于(dp[i + 1][j], dp[i][j + 1]) 	Hard	http://mp.weixin.qq.com/s/Zkir5lVALEaINd8YKBKqpw				
70	Climbing Stairs	斐波拉契数列，自顶向下和自底向上	Easy	http://mp.weixin.qq.com/s/C22y-pCAS4Zahkds6T8f3g
523	Continuous Subarray Sum	自己用了HashSet而不是HashMap，效率更高。边界条件太多，要自己想case！很多次才通过。把k=0和k=1分开处理，防止出错	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484808&idx=1&sn=7720cc96361903921659f75113d084f7&chksm=9ae05000ad97d916094b26749fe273453314663070192c88f9c72307c769624107820fd6b6fc&mpshare=1&scene=1&srcid=0426tM9zglNiIHcpNClS46vX#rd
560	Subarray Sum Equals K	要用hashmap，不仅记录sum，还要记录每个sum出现的次数，因为可能有重复元素！	Medium			
338	Counting Bits	找规律，f(n) = f(n/2) + n % 2	Medium	http://mp.weixin.qq.com/s/c_yLkUSbkR4O3DsrKGwNgw	
516	Longest Palindromic Subsequence	找规律，if s.charAt(i) == s.charAt(j),dp[i][j] = dp[i+1][j-1] + 2; else dp[i][j] = max{dp[i+1][j], dp[i][j-1]}	Medium			
5	Longest Palindromic Substring	Solution 1: 仿照516，自底向上。效率较低。 Solution 2: 从左到右以每个字符为最长回文字符串的结尾，检查Length+2和Length+1的字符串是否是回文。 Solution 3: 从左到右以每个字符为回文字符串的中心，向两边扩展	Medium			
96	Unique Binary Search Trees	"G(n) = G(0) * G(n - 1) + G(1) * G(n - 2) *...* G(n - 1) * G(0) ;The number of BST n should be the number of BSTS rooted at 0 + rooted at 1 +... ;The number of BSTs rooted at i should be the Cartesian Product(笛卡尔乘积) of BST i-1 and BST n-i"	Medium			
95	Unique Binary Search Trees II	自己仿照上一题的思路改写的答案，Beat 87%，相当于加上了缓存，但要对缓存的结果进行修改；而答案一的解法就是普通的递归解法，没有加缓存	Medium			
416	Partition Equal Subset Sum	这题DFS那章做过。dp[i] = dp[i] || dp[i-num];	Medium			
53	Maximum Subarray	自己做出来的，in-place solution,O(n)	Easy			
472	Concatenated Words	方法一：139. Word Break的延伸。自己的解法报错；方法二：Trie树。使用hash：建立hash的复杂度为O(n * len), 查询的复杂度为O(n * len^2)；使用Trie：建立Trie的复杂度为O(n * len), 查询的复杂度为O(n * len)	Hard	http://blog.csdn.net/hackbuteer1/article/details/7964147	使用Trie：因为当查询如字符串abc是否为某个字符串的前缀时，显然以b、c、d....等不是以a开头的字符串就不用查找了，这样迅速缩小查找的范围和提高查找的针对性	
198	House Robber	max(i) = Max{max(i - 1), nums[i] + max(i - 2)}从左往右，最右边即为我们需要的	Easy			
213	House Robber II	利用上题的函数，Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1))。分为两种情况，选第一个和不选第一个	Medium			
337	House Robber III	非常巧妙！Solution 1: helper(root) returns the max value from root.存在重复子问题，需要hashmap缓存遍历过的结果。Solution 2: helper(root)返回两个值，一个是选择root的max value，一个是不选root时的max value。这样完全避免了重复子问题，效率最高	Medium			
279	Perfect Squares	dp[n] = Min{ dp[n - i*i] + 1 },  n - i*i >=0 && i >= 1	Medium			
152	Maximum Product Subarray	//O(n)    //从左往右遍历时，需要记录每个时刻的绝对值最大的两个数（一正一负），这两个数的可能有：从当前位置开始、从当前位置的前面连续到当前    //所以最终的子序列一定是连续的。	Medium			
303	Range Sum Query - Immutable	完成一个类。注意输入可能是空数组	Easy		
304	Range Sum Query 2D - Immutable	自己的解法是受303启发，每行都是一个一维数组，最后把每行加起来即可。答案的方法更巧妙一点，用sum[i][j]表示从(0,0)到(i,j)的矩形中的元素和。另外多加了一行和一列，用来避免边界判断。可以注意一下	Medium			
307	Range Sum Query - Mutable	首次写线段树。首次写Binary Indexed Tree	Medium	线段树 http://www.cnblogs.com/shuaiwhu/archive/2012/04/22/2464583.html	Binary Indexed Tree http://blog.csdn.net/l664675249/article/details/50157669	
308	Range Sum Query 2D - Mutable	照着307改写。范围不再只有start和end，而是有四个子区域	Hard			
576	Out of Boundary Paths	解法一：自己想的，DFS加缓存，但hashmap最后没通过，所以换成了三维数组，也可以换成二维数组。解法二：动规解法，从起点出发，一层一层递增。比较难想	Hard			
100	Same Tree	dfs	Easy			
375	Guess Number Higher or Lower II	//dp[left][right]表示在[left, right]之间的最少保证金    //我们的目的是找到[left, right]之间的某一个start point，使得从它开始的保证金最少    //we can choose k (i<=k<=j) as our guess, and pay price k. After our guess, the problem is divided into two subproblems. Notice we do not need to pay the money for both subproblems. We only need to pay the worst case (because the system will tell us which side we should go) to guarantee win. So dp[i][j] = max{k + max(dp[i][k-1], dp[k+1][j])},  (i<=k<=j)	Medium	刚开始我以为是一个不断的二分过程，找中位数。但这其实是错的，中位数并不一定是最优的		
91	Decode Ways	dp[i] = s(i, i + 1) <= 26 ? (dp[i + 1] + dp[i + 2]) : dp[i + 1];     //含义是，如果当前数字与右边数字有两种组合可能，那么需要在dp[i + 1]的基础上加上i + 1单独切分的种类，有dp[i + 2]种    //只能从后往前遍历，不能从前往后，这是由于0的存在，不能以0位开头！	Medium			
639	Decode Ways II	仿照91，自己做出来的	Hard			
10	Regular Expression Matching	太难了，看答案看了好久= =。解释见注释。dp[i][j]表示s的i前面部分与p的j前面部分是否match	Hard			
44	Wildcard Matching	My Solution: 模仿10. Regular Expression Matching的套路。Solution 2: 用四个指针，很巧妙	Hard	http://yucoding.blogspot.com/2013/02/leetcode-question-123-wildcard-matching.html		
85	Maximal Rectangle	//height表示以当前行为底，当前列的1的高度    //left表示当前列的左边界，left = max(当前行的左边界，上一行的左边界)，分别表示和当前行共同组成矩形、和上一行共同组成矩形    //right表示当前列的右边界，right = min(当前行的右边界，上一行的右边界)	Hard			
221	Maximal Square	//dp    //对于为1的位置，增加正方形的边长的条件是：该位置 Min(左，上，左上对角线的位置对应的边长) + 1	Medium			
256	Paint House	265是它的拓展版本，265的解法更通用	Easy			
265	Paint House II	只需要保存每个时刻的两个最小总费用即可。假设前n-1个房子的最小cost和第二小cost分别为sum1, sum2，第n个房子的最小cost为curr1, curr2，如果curr1对应的颜色和sum1对应的颜色不同，那么前n个房子的最小cost一定为sum1 + curr1；否则，前n个最小cost为Min{sum1 + curr2, sum2 + curr1}	Hard			
276	Paint Fence	题目意思是，最多有两两相邻的颜色相同，不是指所有posts中最多只能有两个相邻的颜色相同。如果当前颜色和前一个颜色取不同，则无论前一个和前前颜色是否相同，当前都有k - 1种取法；如果当前颜色和前一个颜色取相同，则前一个和前前颜色必须不同，且当前只有1种取法。把这两种可能性加起来即为结果。	Easy			
361	Bomb Enemy	//O(m * n)    //当遍历到的当前位置左边或者上边是W，说明当前位置“越界”，需要重新划分新区域并且计算新区域的enemy数	Medium			
120	Triangle	//从下往上。minpath[k][i] = min( minpath[k+1][i], minpath[k+1][i+1]) + triangle[k][i];    //但由于minpath[k+1] would be useless after minpath[k] is computed,可以把二元数组换成一元数组 //minpath[i] = min( minpath[i], minpath[i+1]) + triangle[k][i]; 	Medium			
60	Unique Paths	自己做的，从finish推到start，也可以从start推到finish	Medium			
64	Minimum Path Sum	和60类似。自己做的，没有用额外空间	Medium			
322	Coin Change	模仿279，自己做的	Medium			
121	Best Time to Buy and Sell Stock 	如果延伸一下，给出的是当前价格和前一天价格的差价：{1, 7, 4, 11}, if he gives {0, 6, -3, 7}。用Kadane's Algorithm来解决	Easy			
122	Best Time to Buy and Sell Stock II	贪心。题目有点绕，其实很简单。读懂题很重要	Easy			
124	Best Time to Buy and Sell Stock III	和309一样！	Hard			
309	Best Time to Buy and Sell Stock with Cooldown	//buy[i]表示i之前以buy结尾的最大收益(可能在i时刻buy，也可能在i时刻之前buy)    //sell[i]表示i之前以sell结尾的最大收益(可能在i时刻sell，也可能在i时刻之前sell)    //buy[i]有两种可能：1. i时刻buy，则必须在i - 2或者之前sell；2. i时刻不buy，则在i时刻之前buy，即buy[i - 1]    //sell[i]有两种可能：1. i时刻sell，则必须在i - 1时刻或者之前buy；2. i时刻不sell，则在i时刻之前sell，即sell[i - 1]    //buy[i] = max(sell[i-2]-price, buy[i-1])     //sell[i] = max(buy[i-1]+price, sell[i-1])	Medium			
376	Wiggle Subsequence	//up[i]表示以up结尾的最长wiggle subsequence长度    //down[i]表示以down结尾的最长wiggle subsequence长度    /*    If nums[i] > nums[i-1], up[i] = down[i-1] + 1;     If nums[i] < nums[i-1], down[i] = up[i-1] + 1;     If nums[i] == nums[i-1], down[i] and up[i] keep the same.    */    //再把空间复杂度降到O(1)	Medium	和309类似。两个dp[]分别存储以不同性质结尾的最大长度。两个dp之间互相利用		
115	Distinct Subsequences	比较两个字符串的，都是二维dp[][].dp[i][j]表示t的前i部分被s的前j部分包含的个数。注意：一般这种比较两个字符串的，都把长度短的字符串放在前面，然后在长字符串中找短字符串    //当两个当前字符相等时的递推公式有点难想。含义是：最后一个字符从j之前取的可能种数dp[i][j - 1] + 最后一个字符取j的可能种数dp[i - 1][j - 1]	Hard			
634	Find the Derangement of An Array	//本题求的dp[n]表示：对n个元素进行重排，每个元素有n - 1个位置可以放    //对于第一个元素，假设把它放在第i个元素的位置上(i有n - 1种取法)，那么有两种可能：    //1. 把第i个元素放在第一个位置上。那么对于剩下的n - 2个元素，每个元素有n - 3个位置可以放，即dp[n - 1]    //2. 把第i个元素不放在第一个位置上。那么对于剩下的n - 1个元素，每个元素有n - 2个位置可以放，即dp[n - 2]    //所以，dp[n] = (n - 1) * (dp[n - 2] + dp[n - 1])	Hard			
32	Longest Valid Parentheses	Solution 1: using stack  //Solution 2: dp   Solution 3: 空间复杂度O(1)    //Two passes	Hard			

贪心算法		
357	Count Numbers with Unique Digits	排列组合找规律，可以递归	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483872&idx=1&sn=b649521a9a6c1e49a56974474c77b75b&chksm=9ae05468ad97dd7e8a00b5b15ba902fae4e565d413cb914d66fd8ccf3a4703af87b653032e82&scene=21#wechat_redirect		
452	Minimum Number of Arrows to Burst Balloons	知识点：贪心算法；lamda表达式；Comparator接口。两种排序方法：按照左端点或右端点	Medium	http://mp.weixin.qq.com/s/iQcmIiD614-qWG7xSoDhlg    	http://m.jb51.net/article/48304.htm	
455	Assign Cookies	复习贪心算法课件：贪心选择性质和最优子结构性质	Medium			
406	Queue Reconstruction by Height	按身高从大到小排列，若身高一样，按人数从小到大排列。先放大的再放小的，可以确保人数就是应该插入的位置，因为每次插入的都是剩下的身高最高的，后面不会有人要插在它前面	Medium			
134	Gas Station	想了好久。。。如何一遍遍历就找出start的位置。设置need参数表示到start之前所需要的gas，left表示从start走到某一站所剩余的gas	Medium
435	Non-overlapping Intervals	和452类似。对end进行排序	Medium			
451	Sort Characters By Frequency	多种解法，不同数据结构的运用：1.HashMap(map.keySet()用来遍历哈希表) 2.ArrayList对象的数组 3.StringBuilder(sb.append(), sb.toString()) 4.PriorityQueue(pq.offer(), pq.poll()) 5.字符串转成字符数组：str.toCharArray()，反之String.valueOf(char_array)，或者String str = new(chararray);	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484373&idx=1&sn=c298e0c02fca13016188212b71efde79&chksm=9ae0565dad97df4ba4daffaa438e8ee2939aac8515f6516548dd19ee65e0f80b0ffc26aadf7b&scene=21#wechat_redirect	https://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html	
55	Jump Game	记录当前能到达的最远位置。若i大于max，说明到不了i，返回false	Medium			
45	Jump Game II	设置一个end表示当前jump内可以到达的最远位置。当超出end范围时，说明需要进行下一次jump，同时更新新的jump内的end范围	Hard			
630	Course Schedule III	先对end time进行排序。当当前time + duration > end时，从pq中poll掉duration最大的course，替换成当前course。By replacing the jth course, with the ith course of a relatively smaller duration, we can increase the time available for upcoming courses to be taken. An extra duration_j - duration_i time can be made available by doing so.	Hard			

Binary Tree						
102	Binary Tree Level Order Traversal	两种解法：1. BFS，用queue实现。2. DFS，用递归实现。队列的语法： Queue<Integer> queue = new LinkedList<Integer>(); queue.offer(value); queue.poll()	Medium			
105	Construct Binary Tree from Preorder and Inorder Traversal	想了挺久！递归。记住思路！还可以用一个HashMap代替循环查找的过程，使查找的复杂度降低	Medium			
106	Construct Binary Tree from Inorder and Postorder Traversal	同上	Medium			
107	Binary Tree Level Order Traversal II	对105的两种解法进行调整。DFS想了挺久！自己改写了递归的一个步骤，更便于自己理解。对于每层的第一个节点，添加到第0个list；对于每层的后几个节点，添加到第result.size() - depth - 1个list（找规律得出：含义是，该节点所在的层被右移的位数 = 该层下面的子节点的层数	Easy			
110	Balanced Binary Tree	自底向上：如果root的任一子节点不平衡，那么整棵树都不平衡，直接返回。复杂度O(n)。自顶向下：对每个结点求高度的复杂度为n, 共n个结点，复杂度为O(n^2)	Easy			
104	Maximum Depth of Binary Tree	递归	Easy			
111	Minimum Depth of Binary Tree	两种方法：第一种，O(n)，递归。第二种：按层进行查找，当找到一个左右结点皆为null的结点时，不再向下遍历，直接返回当前深度	Easy			
94	Binary Tree Inorder Traversal	两种方法：第一种：递归解法，比较简单。第二种：循环解法，用stack来实现	Medium	一个套路，反复复习。只能用DFS不能用BFS？？因为不是一个按层遍历的过程，需要每次直接到叶子		
144	Binary Tree Preorder Traversal	按照套路：inorder是 Add after all left children。preorder是 Add before going to children。Push root to the stack first. While stack is not empty, pop a node, visit it, and put its right child then left child to stack. 	Medium			
145	Binary Tree Postorder Traversal	方法一：Modify pre order. Post order is left, right and root. Pre order is root, left, right. Change it to root, right, left. Then reverse the result. 方法二：双指针，一个指向上一个访问的结点，一个指向当前正在访问的结点	Hard			
226	Invert Binary Tree	"方法一：DFS，递归实现，或stack实现。方法二：BFS，queue实现。虽然是easy,还是想了挺久的。。自己想的第一种递归方法效率很低，参考了答案。比较巧妙"	Easy			
103	Binary Tree Zigzag Level Order Traversal	仿照102，两种方法	Medium	
236	Lowest Common Ancestor of a Binary Tree	若左子树返回null，则说明p,q均在右子树中。若右子树返回null，则说明p,q均在左子树中。若左右均不为null，则说明p,q分别在左和右子树中	Medium			
235	Lowest Common Ancestor of a Binary Search Tree	可能先左转再右转再左转	Easy
572	Subtree of Another Tree	虽然是简单题，但我的DFS解法犯了一个很典型的错误！改正方法是加一个flag记录当前小树节点是否是根。另一种解法是：第一个函数用来遍历大树的每一个节点作为根，然后输入到第二个函数：第二个函数用来检测以当前大树节点为根的子树是否与小树完全一样	Easy			
100	Same Tree	dfs	Easy			
315	Count of Smaller Numbers After Self	//思路很巧妙。从右到左建立Binary Search Tree    //每个结点除了value外，还要记录sum和dup值：sum表示比该结点小的结点个数，dup表示当前结点重复结点的个数	Hard			
116	Populating Next Right Pointers in Each Node	设两个指针，一个表示每层的最左结点，一个表示每层的遍历结点	Medium			
117	Populating Next Right Pointers in Each Node II	很巧妙，新建一个虚拟头结点，它的next是每层最左结点	Medium			
331	Verify Preorder Serialization of a Binary Tree	用入度，出度来解决，对一个合法的二叉树，总的indegree+outdegree一定等于0	Medium			
449	Serialize and Deserialize BST	自己做的，做了挺久。。我是用BFS，按层从上到下依次来。Solution 2: Pre-Order	Medium	Integer.parseInt(string）把String型数字转成int型。例如："12"转成12		
297	Serialize and Deserialize Binary Tree	和449一样。fb常考题！	Hard			
314	Binary Tree Vertical Order Traversal	刚开始用DFS，是错的。因为根据题目要求，from top to bottom，需要先遍历上层的，再遍历下层的，即BFS！//我用了TreeMap对index自动排序，也可以用hashmap，但要保存min和max index  //设置一个和queue完全同步的index队列，保存每个结点的index	Medium			
257	Binary Tree Paths	if(root.left == null && root.right == null)   //这里之前犯了一个错：不是在root==null时加入path，而是在叶子结点加入path。前者导致的问题是叶子结点被重复加入	Easy			
285	Inorder Successor in BST	My Solution: 不仅适用于BST，也适用于所有binary tree，也可以通过调换root,left,right的位置，改编成pre-order，post-order。Solution 2: 按照BST的特点来解，可以稍作变换改编成寻找predecessor	Medium			
156	Binary Tree Upside Down	//和226有点类似 。My Solution: 不是in-place。     //Solution 2: in-place，关键在于，在改变当前节点时，把当前节点的left和right先保存起来	Medium			
543	Diameter of Binary Tree	竟然看了答案。。建立一个新函数，返回最大深度的同时，记录最长length	Easy			
637	Average of Levels in Binary Tree	按层遍历。BFS queue或DFS Recursion	Easy			
404	Sum of Left Leaves	简单	Easy			
617	Merge Two Binary Trees	看了答案	Easy			
538	Convert BST to Greater Tree	自己做的	Easy			
623	Add One Row to Tree	自己做的	Medium			
298	Binary Tree Longest Consecutive Sequence	//自顶向下，下层函数会用到上层函数的参数，通过函数传参的方式。同时因为binary tree遍历只能从上往下，所以还需要一个参数存储父节点的值    //自底向上，上层函数会用到下层函数的参数，通过函数返回值的方式。且不需要参数存储子节点的值，因为可以通过root.left/right获得	Medium			
549	Binary Tree Longest Consecutive Sequence II	//看了Solution的动图，然后自己写的代码    //对每个节点，用数组保存两个值：以当前节点为根的最长连续递增长度len1；以当前节点为根的最长连续递减长度len2    //当前最长总长度为len1 + len2 - 1    //test case: [3,2,4,3,1,null,5,null,null,null,4,null,6]	Medium			
250	Count Univalue Subtrees	自顶向下，通过返回值的方式。这里返回值设置为boolean，表示以该节点为root的subtree是否为univalue	Medium			
653	Two Sum IV - Input is a BST	//自己做的。边加入hashset边查找。这里对root,left,right的遍历顺序可以随意调整。因为这种方法和是否排序没有关系    //方法二：先遍历一遍把递增序列存入list，再在list中双指针法查找target	Easy			
366	Find Leaves of Binary Tree	Bottom to Top，所以helper()函数应该有返回值，而不是传参！    //根据height加入到不同子list中，height的计算是从底往上。	Medium			
199	Binary Tree Right Side View	bfs，dfs.记录height	Medium			
333	Largest BST Subtree	//本题非常好！刚开始的解法如下，自底向上，返回以每个结点为根的subtree的结点数。每次把左结点的值，右结点的值，和root的值比较    //错误的test case: [3,2,4,null,null,1]。这是因为：不能只比较左右结点和root的值，而应该把左子树的最大结点，右子树的最小结点，与root比较    //因此我们需要返回三个值！通过一个wrapper class来返回。也可以通过数组返回，int[3]。	Medium	和549类似		
										
排序						
349	Intersection of Two Arrays	HashSet的用法。遍历用for循环,复杂度为O(n)。还可以用sort、二分查找，复杂度为O(nlogn)	Easy			
350	Intersection of Two Arrays II	自己想出来的，跟答案思路一样。关键在于，map.get(x) + 1和- 1的操作。另外用ArrayList存储result，再输出到数组中	Easy	Solution to 3rd follow-up question		
56	Merge Intervals	和452类似，对start排序，设置head和tail两个参数，注意一些边界情况的处理。循环结束要把最后一个interval加入进来。Collections.sort() operates on a List, and Arrays.sort() operates on an array	Medium			
495	Teemo Attacking	和56解法一样。设置start和end。	Medium			
252	Meeting Rooms	检查是否有重叠区间。按start排序	Easy			
253	Meeting Rooms II	和56很像，但较难。对于从小到大排列的每个end，在从小到大排列的start中查找是否存在start大于end，记录start的位置，对于之后的end，只需要在当前start之后继续查找。Solution2是用priorityqueue，加入的都是需要的room	Medium			
321	Create Maximum Number	太难了！要反复复习！细节不写了，太多了，见代码注释。。。。	Hard			
179	Larest Number	跟321的merge()有点类似，但不同！比如对于6,60，如果按照merge()和larger()，60 > 6，这样merge的结果是660.但是在本题中，结果变成606，所以不能简单地比较两字符串大小，而应比较两字符串两种拼接结果的大小！return (str2 + str1).compareTo(str1 + str2); 比较字符串是否相等，不能用==，而是a.equals(b)	Medium			
280	Wiggle Sort	和wiggle sortII的不同在于，重复数字不用考虑，所以很简单	Medium			
324	Wiggle Sort II	"方法一：Time: O(nlogn) Space: O(n)，把大于中位数的插在奇数位上，把小于中位数的插在偶数位上。 方法二：太难了。。。Time: O(n) Space: O(1)，一样的原理，设置virtual index，不需要开辟新空间。      (1) elements smaller than the 'median' are put into the last even slots (2) elements larger than the 'median' are put into the first odd slots (3) the medians are put into the remaining slots."	Medium	java数组复制，浅拷贝，深拷贝！System.arraycopy(nums, 0, temp, 0, nums.length); https://jingyan.baidu.com/article/e4d08ffddbb7610fd2f60d90.html	java对简单数据类型传值，对复杂数据类型传引用。http://old.bccn.net/Article/kfyy/java/jszl/200601/3069.html	java简单数据类型和复杂数据类型： http://www.cnblogs.com/simplefrog/archive/2012/07/15/2592011.html
215	Kth Largest Element in an Array	复习快速排序，partition，复杂度为O(n)，快排复杂度为O(nlogn)。也可以用priorityqueue，复杂度O(nlogk)	Medium	听下Binary Heap的网课		
524	Longest Word in Dictionary through Deleting	"方法一：对字典排序，O(k * logk + n * k1 * l). k: size of d, k1 <= k, l: average length of strings in d。方法二：不排序，直接一一比较，记录最长的string, O(n * k * l). k: size of d, l: average length of strings in d"	Medium http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484776&idx=1&sn=167c170cb4bfcca4237c7e12f8511740&chksm=9ae050e0ad97d9f6d319ad7d3792783313f82b816eb78aa7b7eaa1841ff160289454e770800b&mpshare=1&scene=1&srcid=0407jz2RkE3eU9Wo3KDmGr10#rd		
164	Maximum Gap	"Bucket Sort 看懂解法并写出来不难，边界问题调bug调到死！不能把max加进来，因为：if(x == max) continue; //这步不加会导致数组越界：因为[min + k * gap, min + (k + 1) * gap)中k <= n-2, 而(max - min)/gap == n-1 maxGap不能是bucketMin[i] - bucketMax[i - 1], 因为bucketMax[i - 1]可能是空！所以要设一个previous记录上一个不为空的bucket的max值 Arrays.fill()"	Hard	"http://bookshadow.com/weblog/2014/12/14/what-is-the-difference-between-radix-sort-bucket-sort-and-counting-sort/ https://www.byvoid.com/zhs/blog/sort-radix"	"对于N个待排数据，M个桶，平均每个桶[N/M]个数据的桶排序平均时间复杂度为：O(N)+O(M*(N/M)*log(N/M))=O(N+N*(logN-logM))=O(N+N*logN-N*logM) = O(N + c), c = N*(logN - logM) 当N=M时，即极限情况下每个桶只有一个数据时。桶排序的最好效率能够达到O(N)。"	"Math.ceil() floor 向下取整 ceil  向上取整 round 则是4舍5入的计算"
75	Sort Colors	参考排名第一的solution,非常简洁。思路是：对于2，和second交换，对于0，和zero交换，对于1，不操作	Medium			
242	Valid Anagram	答案的方法很巧妙，mark	Easy			
329	Longest Increasing Path in a Matrix	自己做出来的，开心。注意，DFS加缓存的时候，不要只考虑用hashmap。先考虑能否用数组，再考虑用hashmap	Hard			
315	Count of Smaller Numbers After Self	Solution 1: MergeSort: count[i] = count of nums[j] - nums[i] < 0 with j > i . Solution 2: 从右到左建立Binary Search Tree    //每个结点除了value外，还要记录sum和dup值：sum表示比该结点小的结点个数，dup表示当前结点重复结点的个数	Hard	MergeSort		
327	Count of Range Sum	count[i] = count of lower <= S[j] - S[i] <= upper with j > i	Hard	MergeSort		
274	H-Index		bucket sort的思路。如果在每个i循环内，对i之前的所有位置+1，复杂度会变成O(n^2)，所以这里不对i之前进行操作，后面用新的循环,在新的循环内，完成从右到左的累加	Medium			
						
BFS						
542	01 Matrix	"DFS,没做出来……不剪枝的话会超时。剪枝效果也不会比BFS好，因为不能预先确定0的位置，可能会导致深度太深，以及重复计算。 答案思路：先确定0的位置，然后先把每个0周围四个位置的距离算好（1），再把每个1周围四个位置算好（2）……层层计算下去。BFS思想，用queue实现，先进先出"	Medium			
101	Symmetric Tree	三种方法，思路相似	Easy			
513	Find Bottom Left Tree Value	BFS很简单，DFS涉及到全局变量，或者wrapper class的问题，目的是使它们的值全局共享，在递归的每一层都能被看到	Medium			
130	Surrounded Regions	从四个边界开始，如果有O，那么和O相连的所有O都不符合，直到找出所有和边界的O相连的O	Medium			
515	Find Largest Value in Each Tree Row	BFS,DFS，简单	Medium			
301	Remove Invalid Parentheses	要遍历两遍：从左到右和从右到左。从左到右移除多余的(, 从右到左移除多余的)。共用一个函数，从右到左时把string颠倒过来，()的顺序也颠倒，然后结束时把string复原输入到结果中	Hard			
407	Trapping Rain Water II	//BFS: 用priorityqueue按照高度从小到大存放单元    //因为边界不能存水，所以从边界开始往内BFS遍历    //当遍历到的单元高度比边界低，则把该单元的存水加上，然后把该单元加入queue，注意：新加入的单元高度为与该单元相连的最高高度！	Hard			
286	Walls and Gates	自己做的BFS，答案还有DFS解法也可以	Medium			
127	Word Ladder	//Two End BFS    //非常巧妙！与单向BFS的不同在于，每次都从较小的set开始遍历，使得BFS的搜索范围不会太宽，提高效率	Medium			
505	The Maze II	//和490不一样在于，490对于每一个拐角点，只需要访问一次，因为只需要判断能否到达该点即可。但本题需要计算最短距离，所以要把所有路线都考虑到。    //Dijkstra最短路径：计算一个节点到其他所有节点的最短路径。以起始点为中心向外层层扩展，直到扩展到终点为止。    //先把离起点最近的点加入队列，然后以这些点为中间点，重新计算从起点到其他点的距离。    //如果新的距离比原来的距离短，则更新起点到其他点的距离。然后再把这些点加入queue，重复上述过程。  	Medium	http://www.cnblogs.com/biyeymyhjob/archive/2012/07/31/2615833.html	//如果用pq的话，那么只要到达目的地，就一定找到了最小路径，直接返回	
499	The Maze III	遇到hole会直接掉下去.不再用distance[][]，而是用对象数组points[][],因为不仅需要记录每个位置的最小距离，还要记录对应的路径。//本来以为规定d,l,r,u的顺序，就可以确保lexicographical order，但事实上并不能。例如：先l后，会先r，再u，导致最短路径被晚加入queue    	Hard		//还可以把queue改为，PriorityQueue<>((a, b) -> ((a.d == b.d) ? a.path.compareTo(b.path) : a.d - b.d))    //这样只要找到第一个到hole的路径，就可以直接返回，不需要继续遍历比较。	

DFS						
98	Validate Binary Search Tree	书上也有这题。三种解法！其中一种Iterative的方法是由In-order的iterative solution推广而来的。解法一涉及到java对象传递，min = root相当于min = new TreeNode(root)，改变了原来的地址引用，所以原来的引用对应的值不变，结果不对	Medium	http://mp.weixin.qq.com/s/LiQpm6LdLgdKi_qm8zB_zw	 java对象值传递和对象传递的总结 http://blog.csdn.net/beyond667/article/details/7849337	http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value
230	Kth Smallest Element in a BST	Solution 1: DFS In-Order Iterative。Solution 2: DFS In-Order Recursive。Solution 3: Binary Search，和书上C4_Q11_RandomNode很像。      Follow-up: If we could add a count field in the BST node class, it will take O(n) time when we calculate the count value for the whole tree, but after that, it will take O(logn) time when insert/delete a node or calculate the kth smallest element.	Medium			
114	Flatten Binary Tree to Linked List	Four Solutions！多复习！	Medium		
547	Friend Circles	"方法一.复习Union-Find！ 这个问题还可以换个说法：找出Tree的个数。set the unvisited node as the root, and find the whole tree rooted at it, in the process, set all the nodes in this tree as visited  方法二：BFS 方法三： DFS"	Medium	http://blog.csdn.net/dm_vincent/article/details/7655764		
200	Number of Islands	和547套路一样，三种方法。但id[]的个数不再只是n，而是m * n，矩阵中每个点都代表一个位置	Medium					
305	Number of Islands II	//自己想到的: 一边加入position一边计算每个时刻的count，这样每次加入时只需要进行一次find()操作，即log(m * n)    //find操作复杂度O(log n)，union操作复杂度O(1)    //对于四周四个位置，通过id是否为-1来判断是否为1。也可以再设置一个matrix[m][n]，这样就直接用模板不需要改动了    //在合并root时，注意应同时更新root1的值，因为有四个方向，root1可能发生改动。或者就是在每个direction时都重新 root1 = find(root1)	Hard			
261	Graph Valid Tree	和547类似，巩固union-find。if(root1 == root2) return false; 说明一条边的两个端点已经被连接在一个tree上，此时重复出现，说明有环       //DFS：需要记录parent，这点没想到。形成环的条件：回到一个已经被访问的结点，且该结点不是当前结点parent，因为parent和children之间本来就是无向互连    //只需要从某一个结点开始，把所有相连或者间接相连的结点都遍历一遍。而不是从每一个结点开始，运行helper函数    //最后检查是否所有结点都被访问过，如果否，说明有没有连通的结点	Medium			
108	Convert Sorted Array to Binary Search Tree	递归，比较简单，都属于那一类的	Easy			
494	Target Sum	第一个答案的方法！sum(P) = (target + sum(nums)) / 2。然后转化为求和为某个值的subset的个数	Medium			
416	Partition Equal Subset Sum	和494思路一样，求和为某个值的subset是否存在	Medium		
112	Path Sum	自己做的	Easy	
113	Path Sum II	自己做的。有两处需要remove，不要忘记！记住：回溯问题，有add必有remove，必须对称！	Medium			
437	Path Sum III	两种解法，其中优化解法复杂度O(n)，想了很久，解释见注释。书上也有这题。记住 ！	Easy(标错了吧)	
329	Longest Increasing Path in a Matrix	自己做出来的，开心。注意，DFS加缓存的时候，不要只考虑用hashmap。先考虑能否用数组，再考虑用hashmap	Hard			
417	Pacific Atlantic Water Flow	又是四个方向问题。DFS的根是四个边缘，从边缘开始往中心遍历，遍历出能够到达的所有路径    //pacific和atlantic不要同时进行，一个一个来，   //BFS则是从四个边缘同时开始往中心遍历，一层层进行	Medium			
529	Minesweeper	自己做的DFS	Medium			
514	Freedom Trail	每步最优，最终解并不一定是最优！// Solution 1: DFS+cache // Solution2：动规：dp[i][j]表示从ring的第j个位置开始，拼出key的第i个位置以后的所有字母，我们最终要求的是dp[0][0],递推关系是：                   dp[i][j] = Min{dp[i + 1][k] + |j - k|}	Hard			
129	Sum Root to Leaf Numbers	自己做的太麻烦了，先转成arraylist再转成int，很复杂.答案思路，DFS过程中，每往下一层，sum乘10再加上当前val	Medium			
124	Binary Tree Maximum Path Sum	//we need to keep track of the maxSum so far    //helper(root) returns the maximum branch containing root	Hard			
339	Nested List Weight Sum	dfs	Easy			
364	Nested List Weight Sum II	//My Solution: DFS    //Two passes: 第一个pass找到最大depth，第二个pass和339一样，递归求和//Solution 2: BFS    // Instead of multiplying by depth, add integers multiple times (by going level by level and adding the unweighted sum to the weighted sum after each level).	Medium			

回溯法						
401	Binary Watch	第一次回溯法！！做了挺久，记住这题，典型案例；位操作	Easy			
131	 Palindrome Partitioning	回溯法，要记得Backtrack之后的恢复步骤！！尤其是对ArrayList； resultList.add(new ArrayList<>(currentList)); //这步不能错写成 resultList.add(currentList); 递归；动规	Medium	http://mp.weixin.qq.com/s/-Z1ngUN_WzorieouPPGWoQ		
78	Subsets	回溯法：不需要等到最后一个结点再add，每个枝都需要返回add； 二进制法	Medium	http://mp.weixin.qq.com/s/1XlzdPoZVhE0kUVT6rODPA		
90	Subsets II	if(i > start && nums[i] == nums[i - 1]) continue; //i>start是为了保留每个根节点的第一根树枝，之后的其他重复树枝就直接剪掉	Medium			
46	Permutations	全排列。方法一：回溯法 复杂度O(n!)。方法二：复杂度O(n^3)	Medium	https://leetcode.com/problems/permutations/#/solutions	http://blog.csdn.net/linhuanmars/article/details/21569031	
47	Permutations II	增加一个isUsed数组，判断结点是否被用过。//对于和前一个结点一样的结点，判断前一个结点是否被used：如果是，说明当前结点和前一个结点在同一个树枝上；否则，说明它们是同一个根的两个分叉，需要剪去当前枝。if(i > 0 && nums[i] == nums[i - 1] && !isUsed[i - 1]) continue;  	Medium			
39	Combination Sum	要记录start的位置，每次从start开始，避免重复	Medium			
40	Combination Sum II	和Subsets II类似	Medium			
216	Combination Sum III	一样的套路	Medium			
377	Combination Sum IV	Solution 1: 回溯法的套路，用hashmap存储之前的结果。10ms //Solution 2: 用数组存储之前的结果，1ms //Solution 3: Iterative solution, bottom-to-up	Medium			
89	Gray Code	位操作。^ | >> <<	Medium			
79	Word Search	DFS,BFS。做了好久！isVisited = true的位置，以及要恢复为false	Medium	http://mp.weixin.qq.com/s/c53OEvJjHDh4gEr6IYOFGA    	http://www.java2blog.com/2015/12/depth-first-search-in-java.html	
343	Integer Break	多种方法，值得研究。自顶向下和自底向上，数学解法	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483903&idx=1&sn=7547ab490ba22d4a119eeb30e767b65f&chksm=9ae05477ad97dd6130b3d4b3f543545b4d2d7d5336e738fd6556c5fa3342fd5fc1e2ceea5772&scene=21#wechat_redirect		
139	Word Break	自己仿照140改的做法，也用HashMap缓存。本来用ArrayList缓存，和它的contains方法，但超时了。然后改成HashMap通过，Beat 80%	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247483885&idx=1&sn=779980700a570e59cfd79fc2a16f92c1&chksm=9ae05465ad97dd732bbc2bc3b48f6a82f0fa8a337fe0020db99e1ebb98ba8d70479183674928&scene=21#wechat_redirect		
140	Word Break II	DFS,用HashMap缓存已经查找过的路径。 注意：不需要把result作为参数传进来，直接设置一个Old_result,一个New_result	Hard	http://mp.weixin.qq.com/s/EEICpFV0icweBDC8vJTqlA		
491	Increasing Subsequences	和前面几题一个套路：有重复元素的排列问题，共同思路是：同一层上，相同元素只能出现一次。同一个树枝上，相同元素可以同时出现。  //输入的数组不是递增的，也不能改变原来的顺序，所以不能sort，这导致重复的元素不能相邻，检查重复比较麻烦//Solution 1    //最简单的做法就是用HashSet存储所有结果，利用HashSet没有重复key的特点    //但这种做法相当于没有剪枝操作，效率不高     //Solution 2    //仿照90 SubSet II的思路    //beat 99.43%	Medium			
526	Beautiful Arrangement	1.自己的解法：用hashset记录访问过的节点。2.解法二：用数组代替hashset。3.对解法二改进：把从前往后改成从后往前。beat 95.48%！因为这样可以避免搜索过深：从前往后的话，前面的索引值比较小，容易被整除，所以会一直向下搜索。从后往前则可以在比较浅的位置中断错误路径。4.解法四：用swap函数代替visited。好处是完全避免了是否重复的判断，效率更高,beat 98%	Medium			
17	Letter Combinations of a Phone Number	Solution 1: FIFO queue ////Solution 2: 回溯法	Medium			
351	Android Unlock Patterns	看题目看了好久才懂。。就是手机手势解锁问题。先把jump[][]定义好，然后用DFS回溯	Medium			
22	Generate Parentheses	//原理是：合法的字符串，从左往右任一时刻，)的个数都应小于等于(    //当(的个数没有超过n时，可以继续添加(    //当)的个数没有超过(时，可以添加)	Medium			
51	N-Queens	标准的回溯法。设置三个visited数组，分别标志该列和两个对角线有没有被占用。	Hard			
52	N-Queens II	和51一样。更简单	Hard			

分治算法						
241	Different Ways to Add Parentheses	（记得用hashmap缓存结果！）记录运算符的下标，然后对于每一个运算符，都可以将当前的表达式分成左右两部分：将左右两部分的数字进行组合，就可以得到当前递归的答案集合‘如果当前表达式没有运算符，则返回当前表达式的数字。	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484844&idx=1&sn=2d9d8a78ecf27258d5f7223b7b95d77a&chksm=9ae05024ad97d9324f394474e5bebaa5c13ed4bb77c6255825de62e2f7bf4cd2f1c5e585a7e4&mpshare=1&scene=23&srcid=0502YuXSifSbQf1F7f2VAwwv#rd	分治法 http://blog.jobbole.com/83944/	
4	Median of Two Sorted Arrays	经典难题，Algorithms上面也有。二分法，也是分治法思想。Time: O(log(min(m, n)))	Hard	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484853&idx=1&sn=20c8931836c07bdbdb6556aecbbd0cdf&chksm=9ae0503dad97d92b1062193a0057ca0ba64d4709ffe43791d6e1bfbe8986fd4a60cdb1ed7040&mpshare=1&scene=23&srcid=05069Iquuw2CJ7IMguOJ3gsQ#rd		
312	Burst Balloons	分治法的反向思维！见注释。可以有两种实现方法：自顶向下递归加缓存，和自底向上循环。很经典！其中，cache[left][right]和dp[left][right]都表示以left和right为边界的区间内最大的得分	Hard			
218	The Skyline Problem	//Solution 2: 分治法，两两合并，再继续合并，直至合并成一个，例如对于前两个building合并的结果是:{2, 10},(3, 15),(7,10),(9, 0)    //合并的思路和Solution 1一样。按照横坐标的位置从左往右遍历，更新当前的最高高度，如果当前高度和result中前一个高度不同，把新坐标和高度加入result    //对于单个区域，边界记为：(left, height)和(right, 0)，这也正是题目对于区域边界记录的定义    //于Solution 1相比，不需要每次在队列中查找并删除每个高度，因此效率高很多	Hard			
282	Expression Add Operators	回溯法，DFS。//注意用long型保存当前数和value    //对于乘法要特别处理！很巧妙！multi的设置，保存在上一个操作中加上/减去的数值，在当前乘法操作中，先减去multi，再加上multi * curr	Hard			

数学/String						
67	Add Binary	用StringBuilder提高效率	Easy			
541	Reverse String II	//Solution 1: O(n), but we need to copy every element in the string.//Solution 2: O(n), but we only need to swap n/2 elements in the string, while leaving the other elements untouched.	Easy			
125	Valid Palindrome	Character.isLetterOrDigit()和Character.toLowerCase的用法！	Easy			
43	Multiply Strings	大整数乘法，很巧妙 `num1[i] * num2[j]` will be placed at indices `[i + j`, `i + j + 1]` 	Medium				
262	Ugly Number	positive，看清题目要求	Easy			
264	Ugly Number II	很巧妙！ugly[i] = Math.min(Math.min(ugly[num2] * 2, ugly[num3] * 3), ugly[num5] * 5)	Medium			
313	Super Ugly Number	Solution 1: My solution, 仿照264。//Solution 2: 在1的基础上改进，把两个循环合并成一个循环，把每个prime*ugly的value保存下来，避免重复计算，beat 95.27%。//Solution 3: O(n * logk),用priorityqueue，每次取出最小的值  //每个对象保存三个值，对应的素数值，对应的指针位置，对应的value（用来排序）	Medium			
373	Find K Pairs with Smallest Sums	Time: O(k * logk) 只需要进行k次循环 //规律是：pq中只需维持nums2.length的大小，每次弹出一个pair时，新加入一个newpair，这个newpair的终点和pair相同，起点为pair的起点+1	Medium	PriorityQueue		
326	Power of Three	非递归或循环的解法：int能保存的最大power of 3是3^19,看3^19能不能被n整除	Easy			
20	Valid Parentheses	看答案的，没想到用stack	Easy			
28	Implement strStr()	双指针	Easy			
345	Reverse Vowels of a String	用HashMap查找	Easy			
76	Minimum Window Substring	解决substring问题的模板	Hard			
159	Longest Substring with At Most Two Distinct Characters	按照上题的模板。76是对于valid的情况，make it invalid; 159是对于invalid的情况，make it valid	Hard			
340	Longest Substring with At Most K Distinct Characters	复习159，做法完全一样。复习substring的模板解法	Hard			
424	Longest Repeating Character Replacement	仿照340。关键是：字符串的长度 - 出现次数最多的数字的个数 = 要替换的数字个数，这个个数要小于等于k	Medium			
3	Longest Substring Without Repeating Characters	依然按照76的模板。是对于invalid的情况，make it valid	Medium			
438	Find All Anagrams in a String	//和其他几个substring问题的区别在于：没有内部while循环，因为本题要求的是固定长度，而其他几个问题都是任意长度。    //所以必须在增加end指针的同时，增加begin指针	Easy			
567	Permutation in String	和438解法一模一样。效率非常高。O(n), n = s2.length()	Medium			
71	Simplify Path	自己的解法，比较难，没有用自带的函数；答案的解法利用split()函数简化操作	Medium			
30	Substring with Concatenation of All Words	不太难，和答案的思路一样，在字符串中查找多个子字符串，一般可以用hashmap存储子字符串	Hard			
150	Evaluate Reverse Polish Notation	stack,简单。String型数字转成Int型用Integer.parseInt()	Medium			
400	Nth Digit	First find the length of the target number; Second find the target number; Last find the target digit of the target number	Easy			
415	Add Strings	做过很多次，简洁写法	Easy			
166	Fraction to Recurring Decimal	对于小数位，when there are two same remainders, we know the fractional part is repeating。用hashmap存储每个余数，需要用hashmap而不是hashset，保存每个数字的位置	Medium			
161	One Edit Distance	多种情况，细心一点	Medium			
60	Permutation Sequence	做了挺久。My Solution: 答案是对的，但是TLE。//数学角度推理：先确定第一位在哪个区间，然后第二位，第三位……    //写出推理过程公式，更便于代码书写	Medium			
49	Group Anagrams	自己想的和答案一样，对每个String排序作为hashmap的key	Medium			
13	Roman to Integer	罗马数字的特点。答案是直接把所有情况列出来	Easy			
12	Integer to Roman	答案更直接，把每个范围内的整位数理出来	Medium			
273	Integer to English Words	1-19归为一类，10-90的整十归为一类，剩下的递归处理	Hard			
168	Excel Sheet Column Title	每次在左边插入新字母	Easy			
214	Shortest Palindrome	答案很巧妙。。j最终的位置表示：j左边的字符串是最长回文字符串，或者是j左边的字符在j的右边都逆序出现过，所以要继续递归检查直到为回文字符串	Hard			
482	License Key Formatting	if(sb.length() % (K + 1) == K) sb.append('-');这步是关键	Medium			
418	Sentence Screen Fitting	//将sentence展开，用空格隔开。从0开始，每次加cols即为下一行的第一个数    //但需要考虑：若对应的数字是‘ ’，不能以空白开头，所以需要加一，变为下一个数字    //若对应的数字左边也是数字，说明是一个数被分行了，需要减一直到左边是空白，此时指向的位置是一个数的开头	Medium			
422	Valid Word Square	if(j >= m || i >= words.get(j).length() || words.get(i).charAt(j) != words.get(j).charAt(i)) return false;             //这两个边界条件很重要！防止words.get(j).charAt(i)的两处出现越界	Easy			
554	Brick Wall	HashMap	Medium			
157	Read N Characters Given Read4	read只会被调用一次	Easy			
158	Read N Characters Given Read4 II - Call multiple times	read会被调用多次。需要保留上一次read4操作读取的数组，以及对应的buffPointer。这样下一次read时，会把该位置之后的数先读取到数组中，再进行read4操作	Hard			
7	Reverse Integer	对溢出的处理，很巧妙。和原来相比看是否一致	Easy			
8	String to Integer (atoi)	不能按照7的溢出处理方法。因为对于"2147483648"，会错误。	Medium			
204	Count Primes	Solution 1: 从2开始，对每个质数，把以它为因子的数都标记为true（不是质数） Solution 2: 先把count初始化为小于n的负数的个数，然后对于每个奇数，把以它为因子的数都标记为true（不是质数），同时count减一	Easy	对于for循环，如果初始值就越界的话，会导致结果越界！如果初始值不越界，就会在越界前停止！		
396	Rotate Function	O(n ^ 2)的解法，TLE。应该想到可能存在O(n)的解法，通过找规律：F(k) - F(k-1) = sum - n * Bk[0]	Medium			
246	Strobogrammatic Number	答案解法：if (!"00 11 88 696".contains(num.charAt(i) + "" + num.charAt(j))) return false;	Easy			
247	Strobogrammatic Number II	自底向上。递归	Medium			

Array						
88	Merge Sorted Array	双指针问题	Easy			
189	Rotate Array	My Solution: Start from one element and keep rotating until we have rotated n different elements. Solution 2: Reverse the first n - k elements, the last k elements, and then all the n elements.	Easy			
26	Remove Duplicates from Sorted Array		Easy			
80	Remove Duplicates from Sorted Array II	和26一个套路。if(nums[i] != nums[count - 2])  nums[count++] = nums[i];   //注意: 不是和nums[i - 2]，而是和nums[count - 2]相比。因为count是待填入的位置，所以应该和这个位置前面的两个数不同   	Medium			
57	Insert Interval	分成三段：与newInterval完全不重叠的左边区间，与newInterval重叠的中间区间，与newInterval完全不重叠的右边区间	Hard			
581	Shortest Unsorted Continuous Subarray	不太easy。。自己做出了一种解法，然后答案有两种解法。其中一种解法O(n)很巧妙！双指针。min表示从左到右的最大值，max表示从右往左的最小值。	Easy			
169	Majority Element	Since the majority element appears more than n/2 times, if we remove two different elements from the array, the majority element will still appears more than n/2 times	Easy			
229	Majority Element II	"如果是> 1/k，那么最多只有k - 1个答案，那就设置k - 1个majority。    //最后一定要再遍历一遍统计每个majority真实出现的次数，验证"	Medium			
334	Increasing Triplet Subsequence	设一个min和一个max，当当前数大于max时，说明已经有三个数是增长趋势，return true	Medium			
42	Trapping Rain Water	Solution 1: Fix the higher one and flow water from the lower part. Solution 2: 先从左到右一个pass确定每个位置的左边界，然后再从右往左一个pass确定每个位置的右边界，然后用较小的边界-height	Hard			
532	K-diff Pairs in an Array	之所以用hashmap而不能用hashset，就是因为k = 0的情况，需要知道有多少个重复数字	Easy			
289	Game of Life	自己做出来的	Medium			
391	Perfect Rectangle	自己想不到，看答案的。//The right answer must satisfy two conditions: //1. the large rectangle area should be equal to the sum of small rectangles //2. count of all the points should be even, and that of all the four corner points should be one	Hard			
463	Island Perimeter	自己的解法；答案的解法比较巧妙：islands * 4 - neighbours * 2	Easy			
409	Longest Palindrome	可以用hashmap, hashset, array	Easy			
54	Spiral Matrix	答案很巧妙。对left和up两种情况，要先进行判断，防止重复	Medium			
283	Move Zeroes	自己做的，简单	Easy			
325	Maximum Size Subarray Sum Equals k	我的想法是先算出所有sum，加入hashmap，再遍历一遍找最大跨度。答案的思路是边加入边找。	Medium			
1	Two Sum	和325一样，边加入边找	Easy			
525	Contiguous Array	把0替换为-1，转化为Maximum Size Subarray Sum Equals k, k = 0	Medium			
311	Sparse Matrix Multiplication	稀疏矩阵：很多0，所以需要跳过0，否则TLE。Solution 2: A sparse matrix can be represented as a sequence of rows, each of which is a sequence of (column-number, value) pairs of the nonzero values in the row.	Medium			
277	Find the Celebrity	看答案的，挺怪异的。。不知道普通群众之间互相是否认识，只知道celebrity的特性。只知道candidate不认识他右边的所有人，不确定左边的情况，所以需要第二个pass	Medium			
157	Read N Characters Given Read4		Easy			
238	Product of Array Except Self	//先从左往右第一个pass，算出每个数左边的所有数的乘积left；    //再从右往左第二个pass，算出每个数右边的所有数的乘积right，与left相乘，即为除了本身以外的所有数的乘积	Medium			
380	Insert Delete GetRandom O(1)	当去掉某一个数后，list和map中在该数后面的数的index都需要跟着改变，所以应该把该数和list中最后一个数交换，然后删除最后一个数	Medium			
398	Random Pick Index	//Resevoir Sampling:     //在取第n个数据的时候，我们生成一个0到1的随机数p，如果p小于1/n，保留第n个数。大于1/n，继续保留前面的数。直到数据流结束，返回此数。    //用数学归纳法证明	Medium	数学归纳法证明： http://blog.csdn.net/javastart/article/details/50610868		
31	Next Permutation	做过类似的题。从右往左，找到第一个比右边数小的数，记录位置i。然后从右往左找到第一个比该数大的数，和i交换。最后对i右边的序列进行排序，也就是reverse，因为右边序列已经是递减的	Medium			
643	Maximum Average Subarray I	自己做的，滑动窗口，很简单	Easy			
628	Maximum Product of Three Numbers	保存三个最大的正数和两个最小的负数	Easy			
565	Array Nesting	从不同i开始的数组不会有重复，所以可以把遍历过的位置标为-1，而不需要恢复原状	Medium			
621	Task Scheduler	Solution 1: 先利用出现次数最多的几个task构造出frame，然后往里填剩余task。   //Solution 2: 用PriorityQueue.在每个n的区间内，按照出现频率高低添加不同的task。如果能不填满n，说明需要加idle补齐n。对于最后一个区间n，不需要补齐。	Medium			
358	Rearrange String k Distance Apart	//和621类似，但621只需要找到长度，本题需要把字符串输出    //不用pq，因为pq只能判断频率，但对于相同频率的不同字母，我们还需要知道每个字母的前一个位置，在当前位置是否合法	Hard			
128	Longest Consecutive Sequence	//map中存放每个数和它所在最长连续序列的长度    //每次加入新数和新长度后，需要更新该数所在连续序列的上下限对应的长度！序列中间的数对应的长度则不需要变，因为之后的新数只会插入在left左边或者right右边    	Hard			
163	Missing Ranges	难点在于考虑溢出的各种情况，最后把需要加减1的变量都设为long型	Medium			
66	Plus One		Easy			
448	Find All Numbers Disappeared in an Array	不能把遍历过的数都置为-1，因为之后还会用到本来的值。所以置为相反数	Easy			
442	Find All Duplicates in an Array	和448一个套路	Medium			
485	Max Consecutive Ones	我的解法设置left和right，答案解法只设置一个count。更简单	Easy			
605	Can Place Flowers	LinkedIn面经。optimized方法: 当count>=n时，直接返回true。	Easy			
243	Shortest Word Distance	一次遍历，同时记录p1和p2的位置，分别指向两个words	Easy			
244	Shortest Word Distance II	关键在于：在两个index的list中查找相差最小的值。当index1 < index2时，我们需要增加index1的值，这样才能得到更小的距离。反之，增加index2的值。	Medium			
245	Shortest Word Distance III	自己做的，有重复数字的情况。每次更新较小的指针	Medium			
15	3Sum Closest	跳过相同的left, mid, right	Medium			
16	3Sum Closest	三个指针	Medium			
259	3Sum Smaller	Solution 1: O(n^2)，和3Sum类似。Solution 2: O(n^2*logn),二分查找	Medium			
18	4Sum	在3Sum的基础上改进：先固定first，再固定second，然后就转化成3Sum，寻找可能的third和fourth。提高效率：对于first和second过小或者过大的情况，直接跳过	Medium			
11	Container With Most Water	自己想出来的。双指针。每次移动height较小的指针，因为这样才有可能得到更大的结果。如果移动height较大的指针，结果只会更小	Medium			
48	Rotate Image	Solution 1: first reverse up to down, then swap the symmetry  Solution 2: 我的解法，CTPI也有这题	Medium			
387	First Unique Character in a String	Two passes	Easy			
186	Reverse Words in a String II	First reverse the whole array; Then reverse each word.	Medium			
151	Reverse Words in a String	在166的基础上，需要trim leading, trailing and multiple spaces	Medium			
73	Set Matrix Zeroes	用每行和每列的第一个数表示该行或该列是否含0。但要注意！当(0,0)位置为0时，可能表示第0行为0，或者第0列为0，所以需要两个boolean值标记第0行和第0列的情况	Medium			
118	Pascal's Triangle	也可以用dp[][]来解	Easy			
119	Pascal's Triangle II	只用一个list，也可以给118用此种解法。先在开头加1，再加和	Easy			

链表Linked List						
234	Palindrome Linked List	//Solution 1: 先通过fast和slow遍历一遍数组，再把右半部分反转   //Solution 2: beat 94.52%。reverse左半边，这样一次遍历就可以同时完成slow,fast的定位和左半边反转	Easy	链表反转，避免空指针操作！		
61	Rotate List	Solution 1: My solution, 仿照189。Start from one element and keep rotating until we have rotated n different elements. Solution 2: 把链表首尾串联	Medium			
21	Merge Two Sorted Lists	递归解法	Easy			
23	Merge k Sorted Lists	Solution 1: 用priority queue。Solution 2: mergeSort的思想，merge函数是21. Merge Two Sorted Lists中的	Hard			
206	Reverse Linked List	自己写出来iterative解法，递归解法就是对iterative稍作改动	Easy			
92	Reverse Linked List II	两种解法，重点在于virtual head，比较巧妙。我的解法是基于206，答案解法比较新	Medium			
148	Sort List	Solution 1: MergeSort：比较好想，虚拟头结点的使用。Solution 2: QuickSort：答案的quicksort，交换的是节点的值，不是节点本身，不同于一般QuickSort从两边往中间，这种解法都是从左到右交换的	Medium			
141	Linked List Cycle	fast和slow若相遇，则说明有cycle	Easy			
142	Linked List Cycle II	双指针，经典题	Medium			
19	Remove Nth Node From End of List	虚拟头结点	Medium			
86	Partition List	两种方法：1、建立两个list,一个存放<x的，一个存放>x的，最后合并两个list；2、和我的思路一致，遇到大的跳过，遇到小的插入到前面，cur保存当前>=x的序列的尾结点，pre保存前面<x的序列的尾结点	Medium			
2	Add Two Numbers	求和问题，虚拟头结点	Medium			
445	Add Two Numbers II	reverse list，通过stack实现。注意result也是颠倒的	Medium			
160	Intersection of Two Linked Lists	//a + c + b = b + c + a    //So if two linkedlist intersects, the meeting point in second iteration must be the intersection point. If the two linked lists have no intersection at all, then the meeting pointer in second iteration must be the tail node of both lists, which is null	Easy			
138	Copy List with Random Pointer	看答案做了挺久，第二种方法非常巧妙。Solution 1: 用hashmap    //Time: O(n), Space: O(n)。Solution 2: In-place 	Medium			

Graph						
332	Reconstruct Itinerary	hierholzers算法，欧拉路径：a trail which visits every edge exactly once	Medium	http://www.geeksforgeeks.org/hierholzers-algorithm-directed-graph/	1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。  2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。 3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。	
399	Evaluate Division	//这题其实是一个在双向图中搜索边的问题    //graph的题都需要先构建图，用hashmap，本题还涉及每条边的权重，所以要额外增加一个hashmap存储权重，这点看了答案才想到    //然后对于要搜索的每条边，都进行深度优先搜索dfs    //对于图来说，dfs需要设置visited，防止重复搜索某条边，比如a-b-a-    //dfs函数自己写的，比答案简单，不需要传递value值	Medium			
310	Minimum Height Trees	//BFS，我用了queue来实现，答案是用两个arraylist    //受path graph的启发，我们从所有叶子开始，同时向前移动，直到所有叶子汇聚在一点或者两点    //当把每一个叶子移到它的parent位置时，需要把parent的该叶子删除，如果此时parent只剩一个叶子，那么把parent加入叶子中    //用HashSet存储和每个索引相连的路径，因为需要频繁地查找和删除操作。    //返回hashset的值用iterator，随机返回一个。但对于叶子结点，只能返回一个值    	Medium	HashSet是泛型类，不能直接建array。只能用ArrayList。HashSet<Integer>[] paths = new HashSet<Integer>[n]; error: generic array creation，	Collections.singletonList(0)	
133	Clone Graph	做了好久。。 DFS自己做出来了，但也经过几个弯路。BFS好难想。。。注意引用地址。详细见注释	Medium			
207	Course Schedule	寻找图中有没有环。1、BFS解法。拓扑排序，环无法被去掉，所以count会小于结点数。2、DFS解法。对每一个结点依次进行深度搜索，如果回到出发点，则证明有环。改进的DFS解法！效率最高！beat 99.89%：visited不再是简单的true or false，而有0,1,2三个值：0表示未被访问，1表示正在被访问的当前路径上，2表示已经被访问并且被证明不在环上。	Medium	拓扑排序：http://blog.csdn.net/changyuanchn/article/details/17067349	ArrayList[] paths = new ArrayList[numCourses];  //error: cannot create array with '<>'，这里不能加<>。遍历的时候，(int)paths[root].get(i)强制类型转换！或者：ArrayList<Integer>[] paths = new ArrayList[numCourses]，不需要强制类型转换	
210	Course Schedule II	仿照207，改进的DFS解法效率最高。但要注意：207中paths[pre[0]].add(pre[1])和paths[pre[1]].add(pre[0])都对，但本题只能是paths[pre[0]].add(pre[1])。因为本题要求的路径其实就是拓扑排序的定义，要把优先级最高的结点放在前面，所以从后置课向前置课进行遍历，遍历到尽头（或尽头的结点都已经被加入路径）时，即是当前优先级最高的前置课	Medium								
323	Number of Connected Components in an Undirected Graph	求tree或者graph个数的套路。Union-Find； DFS	Medium			

Bit Manipulation						
136	Single Number	Bit Manipulation. 两次^，得到0	Easy			
137	Single Number II		Medium			
191	Number of 1 Bits	不是>>，应该是无符号移位	Easy			
371	Sum of Two Integers		Easy	位操作套路总结：https://leetcode.com/problems/sum-of-two-integers/#/solutions		
342	Power of Four	 //4^k = 2^(2k)   //只有一个1位，且1在偶数位置上    //num & (num - 1)用来remove the last 1 bit	Easy			
231	Power of Two	只有一个1位	Easy			
268	Missing Number	a^b^b =a. 异或操作的特点：对相同的数异或两次，变回原来	Easy			
190	Reverse Bits	Solution 1: 设一个mask = 1<<31，每次mask和n同时右移一位，这样mask可以使对称位置变成1	Easy			
201	Bitwise AND of Numbers Range	1<<count表示从右往左count个位之后，m和n完全相同，即count左边的所有位都相同。然后乘m把count左边的位拼接上去 	Medium			
187	Repeated DNA Sequences	Solution 1: 把字符串存到hashset中。Solution 2: 用int型变量代替字符串，用bit manipulation	Medium			
389	Find the Difference	Solution2: Bit Manipulation,利用异或的性质	Easy			
421	Maximum XOR of Two Numbers in an Array	看答案想了半天。。从左往右，从高位往低位，一位一位的检查，是否存在两个数的该位相反，如果有，把max的该位置1	Medium			
318	Maximum Product of Word Lengths	位操作：把每一个字符串都用一个二进制数表示，每一位表示一个字母。判断两字符串是否有重复字符，用&操作即可	Medium			
461	Hamming Distance	先异或，再数xor的1的个数	Easy			
477	Total Hamming Distance	对于每个位，计算nums中每个数该位为1的个数，然后为1的个数*为0的个数即为total	Medium			

Design						
155	Min Stack	自己做的，只用一个stack的解法，beat 87.87%	Easy			
146	LRU Cache	FB的常考设计题，多复习！	Hard			
348	Design Tic-Tac-Toe	看起来难其实不难，只有两个对角线，只有两个玩家，且同一位置不能被重复放	Medium			
635	Design Log Storage System	利用String.compareTo(),把每个字符串的index前的部分和上下限前半段比较 	Medium			
535	Encode and Decode TinyURL	Solution的几种方法分析写得非常好	Medium			
281	Zigzag Iterator	k个list的通用模板。利用iterator	Medium			
346	Moving Average from Data Stream	需要保存size个数，因为i处的sum需要用到i - size位置的数，而i之后的数又需要用到i - size之后的数。所以要把这size个数都保存下来	Easy			
271	Encode and Decode Strings	把每个字符串用该字符串长度 + ‘/’ 隔开	Medium			
288	Unique Word Abbreviation	题意比较模糊，自习读题	Medium			
170	Two Sum III - Data structure design	一种解法是：add复杂度O(n)，find复杂度O(1)；另一种是：add复杂度O(1)，find复杂度是O(n)。需要和面试官沟通	Easy			

Stack						
503	Next Greater Element II	方法一：暴力；方法二：Stack。很巧妙！	Medium	http://mp.weixin.qq.com/s?__biz=MzAwMDk1MTUyNw==&mid=2247484355&idx=1&sn=863e6f2ebafef26a89cd0d3e89b453dd&chksm=9ae0564bad97df5dba9ebbae7b018df81873b0ae83d8b30b7206002c081ef8f9c91824aadb1d&scene=21#wechat_redirect		
496	Next Greater Element I	自己想到的，模仿503，但不存放在数组中，而是存放在hashmap中	Easy			
556	Next Greater Element III	//很巧妙：从右往左找到第一个比前一个数小的数，也就是该数的右边是一个单调递减数列。    //然后把该数和右边数列中大于它的最小数对换    //最后把该数右边的序列排序	Medium			
456	132 Pattern	//烧脑。。    //从右往左，找到存在右边的数比它小的数，作为3，然后把它的右边比它小的最大数作为2，继续往左，当发现一个数比2小，则为1，即最小的数    //对于132，最小的数在最左边，所以应该从右往左，先确定3，再确定2，最后确定1    //如果是213，则为从左往右，因为3在最右边，所以需要先确定1，再确定2，最后确定3	Medium			
385	Mini Parser	//思路我都想到了，但把所有情况考虑到真是不容易，尤其对于：什么时候加到stack里    //可能不止一个数字，不止一个list	Medium			
173	Binary Search Tree Iterator	自己做的，In-Order的stack实现方法	Medium			
341	Flatten Nested List Iterator	自己想出来了，包括逆序添加到stack中    //但我的解法把next()和hasNext()函数体颠倒了顺序，这导致[[]]通不过，因为[]会被加到stack中，但此时stack中其实并不包含任何Integer    //所以可以在我的解法基础上，在hasNext()中对[[]]单独处理    //或者像答案一样，把主函数体放在hasNext()中	Medium			
394	Decode String	自己做出来的。和385有点像，需要考虑各种边界情况，复杂。//Solution 2: 不用stack，递归解法	Medium			
402	Remove K Digits	自己做出来的。和556很像。从左到右把递增的数加入stack中，当发现一个数比它左边的数小，进行pop()操作，同时k--。遍历完后，如果k还>0，那么对stack中剩余的递增序列进行k次pop()。	Medium			
591	Tag Validator	直接看答案的。很繁琐，但不难//string.startsWith(),和indexOf()的应用    //Character.isUpperCase()	Hard			
255	Verify Preorder Sequence in Binary Search Tree	看答案的。把递减序列加入stack中，这表示当前序列在左分支上。当遍历到右分支，pop所有比当前数小的数，并且保留其中最大的为min，作为接下来序列的下边界，若下一个数小于min，则返回false。Solution 1: Space: O(n), using stack。Solution 2: Space: O(1), using preorder[]	Medium			
316	Remove Duplicate Letters	//Solution 1: 递归解法    //每次需要重新计算每个字母的出现个数，效率低   //Solution 2: Iterative Soluition    //beat 99.4%    //map用来记录当前遍历的字母右边每个字母的个数，如果右边的某个字母个数==0，则说明右边不再有这个字母，只有左边有，所以当前字母不能取代左边的字母    //visited用来表示当前result中是否有该字母，如果已经有，则直接跳过，    //遍历时，把当前字母与result的最后一个字母比较，如果当前字母更小且当前字母右边仍有result中的字母，则把result中的字母替换成当前字母	Hard			
388	Longest Absolute File Path	注意：\t, \n的长度均为1，因为\是转义字符，不算入长度的计算.Solution 1: 用stack. Solution 2: 用数组代替stack	Medium			
636	Exclusive Time of Functions	stack中存放任务id，用一个变量prevTime保存下一个任务的开始时间	Medium			

Heap(PriorityQueue)						
239	Sliding Window Maximum	//第一次使用双向队列dequeue    //在dequeue中存储的数由左往右递减排列，相当于一个优先队列。每次窗口右移一格时，把超出k窗口大小的数移出，然后把小于新元素的数移出，再加入新元素。    //此时dequeue中最顶端（左）的数就是k范围内的最大数	Hard	ArrayDeque的使用		
295	Find Median from Data Stream	两个pq，一个存放前半段，逆序排列，一个存放后半段，正序排列	Hard			
659	Split Array into Consecutive Subsequences	//For each element, we see if it can     //1. be appended to a previously constructed consecutive sequence or     //2. be the start of a new consecutive sequence.     //If neither are true, then we return false.     	Medium			
347	Top K Frequent Elements	三种解法，复习TreeMap，PriorityQueue。和一些语法：Map.Entry<> entry = map.entrySet(); treemap.pollLastEntry(); entry.getKey(), entry.getValue(); list.addAll()是把一个list并入另一个list	Medium			

Trie						
472	Concatenated Words	方法一：139. Word Break的延伸。自己的解法报错；方法二：Trie树。使用hash：建立hash的复杂度为O(n * len), 查询的复杂度为O(n * len^2)；使用Trie：建立Trie的复杂度为O(n * len), 查询的复杂度为O(n * len)	Hard	http://blog.csdn.net/hackbuteer1/article/details/7964147	使用Trie：因为当查询如字符串abc是否为某个字符串的前缀时，显然以b、c、d....等不是以a开头的字符串就不用查找了，这样迅速缩小查找的范围和提高查找的针对性	
211	Add and Search Word - Data structure design	仿照472的Trie Tree写法	Medium			
208	Implement Trie (Prefix Tree)	Trie Tree的实现，再次巩固	Medium			
425	Word Squares	把isEnd参数换成tails，因为本题每个单词都是等长的，不需要isEnd来标志。tails表示以该结点为前缀的所有单词字符串。	Hard			
				
